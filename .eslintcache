[{"D:\\ReactProjects\\lite-lineage\\src\\index.js":"1","D:\\ReactProjects\\lite-lineage\\src\\App.js":"2","D:\\ReactProjects\\lite-lineage\\src\\reportWebVitals.js":"3","D:\\ReactProjects\\lite-lineage\\src\\components\\Content.jsx":"4","D:\\ReactProjects\\lite-lineage\\src\\components\\Header.jsx":"5","D:\\ReactProjects\\lite-lineage\\src\\components\\Footer.jsx":"6","D:\\ReactProjects\\lite-lineage\\src\\components\\StartView.jsx":"7","D:\\ReactProjects\\lite-lineage\\src\\components\\FamilyView.jsx":"8","D:\\ReactProjects\\lite-lineage\\src\\components\\FamilyMember.jsx":"9","D:\\ReactProjects\\lite-lineage\\src\\components\\SideDrawer.jsx":"10","D:\\ReactProjects\\lite-lineage\\src\\components\\FamilyMemberExtension.jsx":"11","D:\\ReactProjects\\lite-lineage\\src\\components\\NavInFamily.jsx":"12","D:\\ReactProjects\\lite-lineage\\src\\FamilyTree.js":"13","D:\\ReactProjects\\lite-lineage\\src\\Person.js":"14","D:\\ReactProjects\\lite-lineage\\src\\components\\SideDrawerEditMemberForm.jsx":"15","D:\\ReactProjects\\lite-lineage\\src\\components\\StartTreeButton.jsx":"16","D:\\ReactProjects\\lite-lineage\\src\\TreeContext.js":"17","D:\\ReactProjects\\lite-lineage\\src\\components\\SpecialDateInput.jsx":"18","D:\\ReactProjects\\lite-lineage\\src\\Helpers.js":"19","D:\\ReactProjects\\lite-lineage\\src\\components\\Line.jsx":"20"},{"size":500,"mtime":499162500000,"results":"21","hashOfConfig":"22"},{"size":8834,"mtime":1610469595029,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":499162500000,"results":"24","hashOfConfig":"22"},{"size":592,"mtime":1610045473535,"results":"25","hashOfConfig":"22"},{"size":555,"mtime":1610045347870,"results":"26","hashOfConfig":"22"},{"size":280,"mtime":1609793104158,"results":"27","hashOfConfig":"22"},{"size":1374,"mtime":1610045363915,"results":"28","hashOfConfig":"22"},{"size":5897,"mtime":1610479582673,"results":"29","hashOfConfig":"22"},{"size":3643,"mtime":1610469684599,"results":"30","hashOfConfig":"22"},{"size":706,"mtime":1610134593881,"results":"31","hashOfConfig":"22"},{"size":586,"mtime":1609789001400,"results":"32","hashOfConfig":"22"},{"size":877,"mtime":1610466951692,"results":"33","hashOfConfig":"22"},{"size":6714,"mtime":1610469435881,"results":"34","hashOfConfig":"22"},{"size":3472,"mtime":1610383655929,"results":"35","hashOfConfig":"22"},{"size":10541,"mtime":1610475210736,"results":"36","hashOfConfig":"22"},{"size":1832,"mtime":1610045360126,"results":"37","hashOfConfig":"22"},{"size":313,"mtime":1610045323469,"results":"38","hashOfConfig":"22"},{"size":3702,"mtime":1610225479168,"results":"39","hashOfConfig":"22"},{"size":1692,"mtime":1610472154736,"results":"40","hashOfConfig":"22"},{"size":287,"mtime":1610479749312,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"19gfp4v",{"filePath":"45","messages":"46","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"44"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"44"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"44"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"44"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"44"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\ReactProjects\\lite-lineage\\src\\index.js",[],["93","94"],"D:\\ReactProjects\\lite-lineage\\src\\App.js",["95","96","97","98","99","100"],"// import logo from './logo.svg';\nimport './App.css';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Content from './components/Content';\nimport React, { Component } from 'react';\n// import Cookies from 'js-cookies';\nimport FamilyTree from './FamilyTree';\nimport Person from './Person';\nimport TreeContext from './TreeContext';\n\nclass App extends Component\n{\n  constructor(props)\n  {\n      super(props);\n      this.state = {\n        treeNames: this.loadTreeNames(), //array of treeNames\n        isInTree: false,\n        currentTree: null //null when none loaded, otherwise an instance of FamilyTree class\n      }\n      this.handleNewTree = this.handleNewTree.bind(this);\n      this.handleDeleteTree = this.handleDeleteTree.bind(this);\n      this.handleExitTree = this.handleExitTree.bind(this);\n      this.handleRenameTree = this.handleRenameTree.bind(this);\n      this.handleOpenTree = this.handleOpenTree.bind(this);\n      \n      this.handleAddFamMember = this.handleAddFamMember.bind(this);\n      this.handleDeleteFamMember = this.handleDeleteFamMember.bind(this);\n      this.handleEditFamMember = this.handleEditFamMember.bind(this);\n\n      this.treeHandlers = {\n        handleNewTree: this.handleNewTree,\n        handleDeleteTree: this.handleDeleteTree,\n        handleExitTree: this.handleExitTree,\n        handleRenameTree: this.handleRenameTree,\n        handleOpenTree: this.handleOpenTree,\n      };\n\n      //similar thing with this:\n      this.familyHandlers = {\n        handleAddFamMember: this.handleAddFamMember,\n        handleDeleteFamMember: this.handleDeleteFamMember,\n        handleEditFamMember: this.handleEditFamMember,\n      };\n  }\n\n  loadTreeNames()\n  {\n    const namesStr = localStorage.getItem(\"treeNames\");\n    const separator = \"~\";\n    if (namesStr)\n    {\n      return namesStr.split(separator).filter(str => str !== \"\");\n    }\n    else\n    {\n      return [];\n    }\n  }\n\n  saveTreeNames()\n  {\n    localStorage.setItem(\"treeNames\", this.state.treeNames.join(\"~\"));\n    //console.log(\"saved, \" + this.state.treeNames.toString());\n  }\n\n  loadTree(treeName)\n  {\n    if (treeName)\n    {\n      const loadedTreeStr = localStorage.getItem(treeName);\n      if (loadedTreeStr)\n      {\n        const treeObj = new FamilyTree(treeName, Date(), []);\n        treeObj.fillDataFromJSON(loadedTreeStr);\n        return treeObj;\n      }\n      else\n      {\n        console.error(\"Loading tree \" + treeName + \" failed, string from localStorage is falsey.\");\n        return null;\n      }\n    }\n    else\n    {\n      console.error(\"Loading tree \" + treeName + \" failed, this name is falsey.\");\n      return null;\n    }\n  }\n\n  handleNewTree()\n  {\n    //console.log(\"trying to make tree\");\n    const newName = FamilyTree.makeNewName(this.state.treeNames);\n    const newTree = new FamilyTree(newName, Date(), []);\n    this.setState({\n      treeNames: [...this.state.treeNames, newName],\n      currentTree: newTree,\n      isInTree: true\n    }, () => {\n        this.saveTreeNames();\n        newTree.save();\n        console.log(this.state);\n      }\n    );\n  }\n\n  handleDeleteTree(nameOfTreeToDelete)\n  {\n    //console.log(\"trying to delete \" + nameOfTreeToDelete);\n    localStorage.removeItem(nameOfTreeToDelete);\n    this.setState(\n      {\n        treeNames: this.state.treeNames.filter(item => item !== nameOfTreeToDelete)\n      },\n      () => {\n        this.saveTreeNames();\n        //console.log(this.state);\n      }\n    );\n  }\n\n  handleRenameTree(oldTreeName, newTreeName)\n  {\n    if (oldTreeName === newTreeName || this.state.currentTree.treeName !== oldTreeName || !this.state.treeNames.includes(oldTreeName) || this.state.treeNames.includes(newTreeName))\n    {\n      console.log(\"handleRenameTree was ignored.\");\n      return;\n    }\n\n    let newTreeNames = [...this.state.treeNames];\n    const i = newTreeNames.indexOf(oldTreeName);\n    newTreeNames[i] = newTreeName;\n\n    let copyOfCurrentTree = {...this.state.currentTree};\n    copyOfCurrentTree.treeName = newTreeName;\n    this.setState(\n      {\n        treeNames: newTreeNames,\n        currentTree: copyOfCurrentTree\n      },\n      () => {\n        this.saveTreeNames();\n        this.state.currentTree.save();\n      }\n    );\n  }\n\n  handleOpenTree(treeName)\n  {\n    const loaded = this.loadTree(treeName);\n    if (loaded !== null)\n    {\n      this.setState({\n        currentTree: loaded,\n        isInTree: true\n      });\n    }\n  }\n\n  handleExitTree()\n  {\n    this.state.currentTree.save();\n    this.setState({\n      currentTree: null,\n      isInTree: false\n    });\n  }\n\n  addFamMember(person)\n  {\n    if (person)\n    {\n      console.log(\"Adding family member: \" + person.getDisplayName() + \", id will be: \" + person.id);\n      const newFamily = [...this.state.currentTree.family, person];\n      //since a person might be added as a child or parent of some other exisitng person\n      //this needs to be updated in those family members too\n      //they can be mutated directly since a whole tree will be assigned in setState anyway\n      if (person.parentId0 != undefined)\n      {\n        const parentIndex = newFamily.findIndex(item => item.id == person.parentId0);\n        if (parentIndex >= 0)\n        {\n          //making the parent of newly added person have its id in childrenIds[]\n          newFamily[parentIndex].childrenIds.push(person.id);\n        }\n      }\n      for(let i = 0; i < person.childrenIds.length; i++)\n      {\n        const childIndex = newFamily.findIndex(item => item.id == person.childrenIds[i]);\n        if (childIndex >= 0)\n        {\n          //making the i-th child of newly added person have its id in one of the 2 parent slots\n          //it will override the second parent if both are taken\n          if (newFamily[childIndex].parentId0 == undefined)\n          {\n            newFamily[childIndex].parentId0 = person.id;\n          }\n          else\n          {\n            newFamily[childIndex].parentId1 = person.id;\n          }\n        }\n      }\n      const draftTree = FamilyTree.cloneFromOther(this.state.currentTree);\n      draftTree.family = newFamily;\n      this.setState(\n        {\n          currentTree: draftTree,\n        },\n        () => {this.state.currentTree.save();}\n      );\n    }\n  }\n\n  handleAddFamMember(mode = \"default\", anchorPersonId)\n  {\n    if (!this.state.currentTree){return;}\n    const viableModes = [\"default\", \"parent\", \"child\"];\n    if (viableModes.includes(mode))\n    {\n      const newId = this.state.currentTree.findLowestUnusedFamilyMemberId();  \n      const newPerson = new Person(newId);\n      if (anchorPersonId !== undefined && anchorPersonId >= 0)\n      {\n        let loc;\n        if(mode === \"parent\")\n        {\n          newPerson.childrenIds.push(anchorPersonId);\n          loc = this.state.currentTree.findFreeLocationUpwards(anchorPersonId, 4, 2);\n        }\n        else if(mode === \"child\")\n        {\n          newPerson.parentId0 = anchorPersonId;\n          loc = this.state.currentTree.findFreeLocationDownwards(anchorPersonId, 4, 2);\n        }\n        else\n        {\n          loc = this.state.currentTree.findFreeLocationNearby(anchorPersonId, 4, 2, 100, 100);\n        }\n        console.log(loc);\n        newPerson.locationInTreeX = loc.x;\n        newPerson.locationInTreeY = loc.y;\n      }\n      this.addFamMember(newPerson);\n    }\n    else\n    {\n      console.error(\"Invalid mode of adding a family member.\");\n    }\n  }\n\n  handleEditFamMember(personId, replacerPersonObj)\n  {\n    //edited data should already be validated before it gets here\n    //console.log(\"handling edit of person with id: \" + personId + \" (should match this one: \"+ replacerPersonObj.id +\")\");\n    const newFamily = [...this.state.currentTree.family];\n    const i = newFamily.findIndex(item => item.id == personId);\n    if (i >= 0)\n    {\n      newFamily[i] = replacerPersonObj;\n      const draftTree = FamilyTree.cloneFromOther(this.state.currentTree);\n      draftTree.family = newFamily;\n      this.setState(\n        {\n          currentTree: draftTree,\n        },\n        () => {this.state.currentTree.save();}\n      );\n    }\n  }\n\n  handleDeleteFamMember(personId)\n  {\n    const newFamily = [...this.state.currentTree.family];\n    const i = newFamily.findIndex(item => item.id == personId);\n    if (i >= 0)\n    {\n      newFamily.splice(i, 1);\n      const draftTree = FamilyTree.cloneFromOther(this.state.currentTree);\n      draftTree.family = newFamily;\n      this.setState(\n        {\n          currentTree: draftTree,\n        },\n        () => {this.state.currentTree.save();}\n      );\n    }\n  }\n\n  render()\n  {\n    return (\n      <TreeContext.Provider className=\"app\" value={{...this.state, treeHandlers: this.treeHandlers, familyHandlers: this.familyHandlers}}>\n        <Header/>\n        <Content/>\n        <Footer/>\n      </TreeContext.Provider>\n    );\n  }\n}\n\nexport default App;","D:\\ReactProjects\\lite-lineage\\src\\reportWebVitals.js",[],"D:\\ReactProjects\\lite-lineage\\src\\components\\Content.jsx",["101"],"import React, { Component } from 'react';\r\nimport FamilyView from './FamilyView';\r\nimport StartView from './StartView';\r\nimport '../App.css';\r\nimport TreeContext from '../TreeContext';\r\n\r\nclass Content extends Component\r\n{\r\n    static contextType = TreeContext;\r\n\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        //this.state = {}\r\n    }\r\n    \r\n    render()\r\n    {\r\n        return (\r\n            <div className=\"main_content\">\r\n                {(this.context.isInTree === true) ? <FamilyView/> : <StartView/>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Content;","D:\\ReactProjects\\lite-lineage\\src\\components\\Header.jsx",["102"],"import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport NavInFamily from './NavInFamily';\r\nimport TreeContext from '../TreeContext';\r\n\r\nclass Header extends Component\r\n{\r\n    static contextType = TreeContext;\r\n\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n    }\r\n\r\n    //state = {  }\r\n    render()\r\n    {\r\n        return(\r\n        <header className=\"main_header\">\r\n            <h1>LiteLineage</h1>\r\n            {this.context.isInTree === true && <NavInFamily/>}\r\n        </header>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Header;","D:\\ReactProjects\\lite-lineage\\src\\components\\Footer.jsx",[],"D:\\ReactProjects\\lite-lineage\\src\\components\\StartView.jsx",["103"],"import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport StartTreeButton from './StartTreeButton';\r\nimport TreeContext from '../TreeContext';\r\n\r\nclass StartView extends Component\r\n{\r\n    static contextType = TreeContext;\r\n\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        //this.state = {tryingToDeleteTree: false}\r\n    }\r\n\r\n    render()\r\n    { \r\n        const treeButtons = this.context.treeNames.map((treeName) =>\r\n            <StartTreeButton treeName={treeName} key={treeName}/>\r\n        );\r\n\r\n        return (\r\n            <div className=\"start_view\">\r\n                <div className=\"start_box\">\r\n                    <h2>Welcome to LiteLineage</h2>\r\n                    <p className=\"start_desc\">A simple tool for making family trees, with all key family data kept on your machine and no need to create an account. To begin, create a new tree, or pick an existing one.</p>\r\n                    <div className=\"start_button_tray\">\r\n                        {treeButtons}\r\n                        <div className=\"start_button_wrapper\">\r\n                            <button className=\"start_button start_button_special\" onClick={this.context.treeHandlers.handleNewTree}>NEW TREE</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default StartView;","D:\\ReactProjects\\lite-lineage\\src\\components\\FamilyView.jsx",["104","105","106","107"],"D:\\ReactProjects\\lite-lineage\\src\\components\\FamilyMember.jsx",["108","109","110","111","112"],"D:\\ReactProjects\\lite-lineage\\src\\components\\SideDrawer.jsx",["113"],"import React, { Component } from 'react';\r\nimport '../App.css';\r\n\r\nclass SideDrawer extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        //this.state = {}\r\n    }\r\n    \r\n    render()\r\n    {\r\n        return (\r\n            <div className=\"side_drawer\">\r\n                <div className=\"side_drawer_bar\">\r\n                    <h3>{this.props.name}</h3>\r\n                    <button className=\"side_drawer_close_button\" onClick={this.props.closeAction}>x</button>\r\n                </div>\r\n                <div className=\"side_drawer_content\">\r\n                    {this.props.content}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SideDrawer;","D:\\ReactProjects\\lite-lineage\\src\\components\\FamilyMemberExtension.jsx",["114"],"import React, { Component } from 'react';\r\nimport '../App.css';\r\n\r\nclass FamilyMemberExtension extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        //this.state = {}\r\n    }\r\n    \r\n    render()\r\n    {\r\n        return (\r\n            <div className=\"family_member_extended\">\r\n                <p className=\"family_member_info\">Eye color: brown</p>\r\n                <p className=\"family_member_info\">Hair color: black</p>\r\n                <p className=\"family_member_info\"></p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FamilyMemberExtension;","D:\\ReactProjects\\lite-lineage\\src\\components\\NavInFamily.jsx",["115"],"D:\\ReactProjects\\lite-lineage\\src\\FamilyTree.js",["116","117","118"],"import Person from './Person';\r\n\r\nclass FamilyTree\r\n{\r\n    treeName;\r\n    creationDate;\r\n    family = []; //array of instances of Person class\r\n\r\n    constructor(treeName, creationDate, family)\r\n    {\r\n        this.treeName = treeName;\r\n        this.creationDate = creationDate;\r\n        this.family = family;\r\n    }\r\n\r\n    static makeNewName(takenNames)\r\n    {\r\n        let newName = \"My Tree 1\";\r\n        let i = 1;\r\n        while (takenNames.includes(newName))\r\n        {\r\n            i++;\r\n            newName = \"My Tree \" + i;\r\n        }\r\n        return newName;\r\n    }\r\n\r\n    fillDataFromJSON(unparsedJson)\r\n    {\r\n        this.fillDataFromParsedJSON(JSON.parse(unparsedJson));\r\n    }\r\n\r\n    fillDataFromParsedJSON(parsedJsonObj)\r\n    {\r\n        //used for loading family trees from JSON files\r\n        //the way you would use it is you first create an instance of FamilyTree,\r\n        //then you call this to fill in data, where parsedJsonObj is something JSON.parse() returns\r\n        //this is done (instead of only using the constructor) to preserve instance functions,\r\n        //since JSON.stringify() drops them\r\n        this.treeName = parsedJsonObj.treeName;\r\n        this.creationDate = parsedJsonObj.creationDate;\r\n        this.family.length = 0;\r\n        for(let i = 0; i < parsedJsonObj.family.length; i++)\r\n        {\r\n            const personObj = new Person(parsedJsonObj.family[i].id);\r\n            personObj.fillDataFromParsedJSON(parsedJsonObj.family[i]);\r\n            this.family.push(personObj);\r\n        }\r\n    }\r\n\r\n    fillDataFromOther(otherTree)\r\n    {\r\n        this.treeName = otherTree.treeName;\r\n        this.creationDate = otherTree.creationDate;\r\n        this.family = otherTree.family;\r\n    }\r\n\r\n    findLowestUnusedFamilyMemberId()\r\n    {\r\n        let newId = -1;\r\n        let idExists = true;\r\n        while (idExists)\r\n        {\r\n            newId++;\r\n            idExists = false;\r\n            for(let i = 0; i < this.family.length; i++)\r\n            {\r\n                if (newId == this.family[i].id) {idExists = true;}\r\n            }\r\n        }\r\n        return newId;\r\n    }\r\n\r\n    static cloneFromOther(otherTree)\r\n    {\r\n        return new FamilyTree(otherTree.treeName, otherTree.creationDate, [...otherTree.family]);\r\n    }\r\n\r\n    save()\r\n    {\r\n        localStorage.setItem(this.treeName, JSON.stringify(this));\r\n    }\r\n\r\n    getNumberOfNodes()\r\n    {\r\n        return this.family.length;\r\n    }\r\n\r\n    findFreeLocationUpwards(idOfRefPerson, marginX, marginY)\r\n    {\r\n        //upwards dir is -1 since coords are counted from top\r\n        return this.findFreeLocationVertically(idOfRefPerson, marginX, marginY, -1, true, marginX + 1);\r\n    }\r\n\r\n    findFreeLocationDownwards(idOfRefPerson, marginX, marginY)\r\n    {\r\n        return this.findFreeLocationVertically(idOfRefPerson, marginX, marginY, 1, true, marginX + 1);\r\n    }\r\n\r\n    findFreeLocationVertically(idOfRefPerson, marginX, marginY, dir, checkPerifery, periferyRange)\r\n    {\r\n        const i = this.family.findIndex(item => item.id == idOfRefPerson);\r\n        if (i < 0) {return null;}\r\n        const refPerson =  this.family[i];\r\n        const searchRangeY = 100 + marginY;\r\n        for(let i = marginY + 1; i < searchRangeY; i++)\r\n        {\r\n            const y = (dir > 0) ? refPerson.locationInTreeY + i : refPerson.locationInTreeY - i;\r\n            if (this.isLocationFree(refPerson.locationInTreeX, y, marginX, marginY))\r\n            {\r\n                return {x: refPerson.locationInTreeX, y: y};\r\n            }\r\n            //now check perifery a bit to left and right\r\n            if (checkPerifery)\r\n            {\r\n                if (this.isLocationFree(refPerson.locationInTreeX - periferyRange, y, marginX, marginY))\r\n                {\r\n                    return {x: refPerson.locationInTreeX - periferyRange, y: y};\r\n                }\r\n                if (this.isLocationFree(refPerson.locationInTreeX + periferyRange, y, marginX, marginY))\r\n                {\r\n                    return {x: refPerson.locationInTreeX + periferyRange, y: y};\r\n                }\r\n            }\r\n        }\r\n        return {x: 0, y: 0}; //fallback\r\n    }\r\n\r\n    findFreeLocationNearby(idOfRefPerson, marginX, marginY, rangeX, rangeY)\r\n    {\r\n        //searches first to the sides, then moves up or down, first favouring down\r\n        const i = this.family.findIndex(item => item.id == idOfRefPerson);\r\n        if (i < 0) {return null;}\r\n        const refPerson =  this.family[i];\r\n        const searchRangeX = rangeX + marginX;\r\n        const searchRangeY = rangeY + marginY;\r\n        let x;\r\n        //to the sides:\r\n        for(let i = marginX + 1; i < searchRangeX; i++)\r\n        {\r\n            x = refPerson.locationInTreeX - i;\r\n            if (this.isLocationFree(x, refPerson.locationInTreeY, marginX, marginY))\r\n            {\r\n                return {x: x, y: refPerson.locationInTreeY};\r\n            }\r\n            x = refPerson.locationInTreeX + i;\r\n            if (this.isLocationFree(x, refPerson.locationInTreeY, marginX, marginY))\r\n            {\r\n                return {x: x, y: refPerson.locationInTreeY};\r\n            }\r\n        }\r\n        //up and down alternating, with down first, to the sides, proioritizing left\r\n        let y;\r\n        for(let i = marginY + 1; i < searchRangeY; i++)\r\n        {\r\n            for(let q = marginX + 1; q < searchRangeX; q++)\r\n            {\r\n                y = refPerson.locationInTreeY + i;\r\n                x = refPerson.locationInTreeX - q;\r\n                if (this.isLocationFree(x, y, marginX, marginY)) { return {x: x, y: y};}\r\n                x = refPerson.locationInTreeX + q;\r\n                if (this.isLocationFree(x, y, marginX, marginY)) { return {x: x, y: y};}\r\n                y = refPerson.locationInTreeY - i;\r\n                x = refPerson.locationInTreeX - q;\r\n                if (this.isLocationFree(x, y, marginX, marginY)) { return {x: x, y: y};}\r\n                x = refPerson.locationInTreeX + q;\r\n                if (this.isLocationFree(x, y, marginX, marginY)) { return {x: x, y: y};}\r\n            }\r\n        }\r\n        return {x: 0, y: 0}; //fallback\r\n    }\r\n\r\n    isLocationFree(x, y, marginX, marginY)\r\n    {\r\n        const minX = x - marginX;\r\n        const minY = y - marginY;\r\n        const maxX = x + marginX;\r\n        const maxY = y + marginY;\r\n        for(let i = 0; i < this.family.length; i++)\r\n        {\r\n            if (this.family[i].locationInTreeX >= minX && this.family[i].locationInTreeX <= maxX && this.family[i].locationInTreeY >= minY && this.family[i].locationInTreeY <= maxY)\r\n            {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\nexport default FamilyTree;","D:\\ReactProjects\\lite-lineage\\src\\Person.js",["119","120"],"class Person\r\n{\r\n    id;\r\n    locationInTreeX = 0;\r\n    locationInTreeY = 0;\r\n    firstName = \"\";\r\n    secondName = \"\";\r\n    lastName = \"\";\r\n\r\n    parentId0;\r\n    parentId1;\r\n    childrenIds = [];\r\n\r\n    isDead = false;\r\n    causeOfDeath = \"\";\r\n    dateBirth;\r\n    dateDeath;\r\n    useFullDateBirth = false;\r\n    useFullDateDeath = false;\r\n    unsurePreciseYearOfBirth = false;\r\n    unsurePreciseYearOfDeath = false;\r\n\r\n    placeBirth = \"\";\r\n    placeDeath = \"\";\r\n    coordsBirthLat;\r\n    coordsBirthLong;\r\n    coordsDeathLat;\r\n    coordsDeathLong;\r\n\r\n    colorEyes = \"\";\r\n    colorHair = \"\";\r\n    healthProblems = [];\r\n    notes = \"\";\r\n\r\n    #signUnknown = \"?\";\r\n    #signUnsure = \"X\";\r\n    constructor(id)\r\n    {\r\n        this.id = id;\r\n        this.dateBirth = new Date(\"1950/01/01\");\r\n        this.dateDeath = new Date(\"2000/01/01\");\r\n    }\r\n    \r\n    fillDataFromParsedJSON(parsedJsonObj)\r\n    {\r\n        for(let property in parsedJsonObj)\r\n        {\r\n            if (parsedJsonObj.hasOwnProperty(property) && this.hasOwnProperty(property))\r\n            {\r\n                //special case for dates since JSON.stringify() makes it into string\r\n                //and then  JSON.parse() reads it as a string\r\n                if (property == \"dateBirth\")\r\n                {\r\n                    this.dateBirth = new Date(parsedJsonObj[property]);\r\n                }\r\n                else if (property == \"dateDeath\")\r\n                {\r\n                    this.dateDeath = new Date(parsedJsonObj[property]);\r\n                }\r\n                else\r\n                {\r\n                    this[property] = parsedJsonObj[property];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    getDisplayName()\r\n    {\r\n        if (this.firstName === \"\" && this.secondName === \"\" && this.lastName === \"\")\r\n        {\r\n            return this.#signUnknown;\r\n        }\r\n        let displayName = (this.firstName.length > 0) ? this.firstName : this.#signUnknown;\r\n        displayName += (this.secondName.length > 0) ? \" \" + this.secondName[0] + \". \" : \" \";\r\n        displayName += (this.lastName.length > 0) ? this.lastName : this.#signUnknown;\r\n        return displayName;\r\n    }\r\n\r\n    getDisplayDate(date, useFull, unsureOfYear)\r\n    {\r\n        let str = (useFull === true) ? date.getDate().toString().padStart(2, \"0\") + \".\" : \"\";\r\n        str += (useFull === true) ? (date.getMonth() + 1).toString().padStart(2, \"0\") + \".\" : \"\";\r\n        let year = date.getFullYear().toString();\r\n        if (unsureOfYear === true)\r\n        {\r\n            year = year.slice(0, -1) + this.#signUnsure;\r\n        }\r\n        return str.toString() + year.toString();\r\n    }\r\n\r\n    getDisplayDateBirth()\r\n    {\r\n        return this.getDisplayDate(this.dateBirth, this.useFullDateBirth, this.unsurePreciseYearOfBirth);\r\n    }\r\n\r\n    getDisplayDateDeath()\r\n    {\r\n        return this.getDisplayDate(this.dateDeath, this.useFullDateDeath, this.unsurePreciseYearOfDeath);\r\n    }\r\n\r\n    static cloneFromOther(otherPerson)\r\n    {\r\n        const clone = new Person(otherPerson.id);\r\n        for(let property in otherPerson)\r\n        {\r\n            if (clone.hasOwnProperty(property) && otherPerson.hasOwnProperty(property))\r\n            {\r\n                clone[property] = otherPerson[property];\r\n            }\r\n        }\r\n        clone.childrenIds = [...otherPerson.childrenIds];\r\n        clone.healthProblems = [...otherPerson.healthProblems];\r\n        return clone;\r\n    }\r\n}\r\n\r\nexport default Person;","D:\\ReactProjects\\lite-lineage\\src\\components\\SideDrawerEditMemberForm.jsx",["121","122","123","124","125"],"D:\\ReactProjects\\lite-lineage\\src\\components\\StartTreeButton.jsx",["126"],"import React, { Component } from 'react';\r\nimport IconDelete from '../icons/icon_delete.svg';\r\nimport TreeContext from '../TreeContext';\r\n\r\nclass StartTreeButton extends Component\r\n{\r\n    static contextType = TreeContext;\r\n\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {tryingToDelete: false}\r\n        this.handleCancelingDelete = this.handleCancelingDelete.bind(this);\r\n        this.handleTryingToDelete = this.handleTryingToDelete.bind(this);\r\n    }\r\n\r\n    handleTryingToDelete()\r\n    {\r\n        this.setState({tryingToDelete: true});\r\n    }\r\n\r\n    handleCancelingDelete()\r\n    {\r\n        this.setState({tryingToDelete: false});\r\n    }\r\n    \r\n    render()\r\n    {\r\n        const confirmation = (\r\n            <div className=\"start_button_delete_confirmation\">\r\n                <p>{\"Do you really want to delete \" + this.props.treeName + \"?\"}</p>\r\n                <div>\r\n                    <button className=\"confirmation_button_warning\" onClick={this.context.treeHandlers.handleDeleteTree.bind(this, this.props.treeName)}>YES</button>\r\n                    <button className=\"confirmation_button_neutral\" onClick={this.handleCancelingDelete}>NO</button>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        return (\r\n            <div className=\"start_button_wrapper\">\r\n                <button onClick={this.context.treeHandlers.handleOpenTree.bind(this, this.props.treeName)} className=\"start_button\">\r\n                    {this.props.treeName}\r\n                </button>\r\n                <button onClick={this.handleTryingToDelete} className=\"start_button_delete\">\r\n                    <img src={IconDelete}/>\r\n                </button>\r\n                {(this.state.tryingToDelete === true && confirmation)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StartTreeButton;","D:\\ReactProjects\\lite-lineage\\src\\TreeContext.js",["127"],"//import { createContext } from \"react\";\r\nimport React, {createContext} from 'react';\r\n\r\nconst TreeContext = React.createContext(\r\n    {\r\n        currentTree: null,\r\n        isInTree: false,\r\n        treeNames:[],\r\n\r\n        treeHandlers: {},\r\n        familyHandlers: {},\r\n    }\r\n);\r\n\r\nexport default TreeContext;","D:\\ReactProjects\\lite-lineage\\src\\components\\SpecialDateInput.jsx",[],"D:\\ReactProjects\\lite-lineage\\src\\Helpers.js",["128","129","130"],"D:\\ReactProjects\\lite-lineage\\src\\components\\Line.jsx",["131"],{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","severity":1,"message":"137","line":180,"column":28,"nodeType":"138","messageId":"139","endLine":180,"endColumn":30},{"ruleId":"136","severity":1,"message":"140","line":182,"column":65,"nodeType":"138","messageId":"139","endLine":182,"endColumn":67},{"ruleId":"136","severity":1,"message":"140","line":191,"column":64,"nodeType":"138","messageId":"139","endLine":191,"endColumn":66},{"ruleId":"136","severity":1,"message":"140","line":196,"column":47,"nodeType":"138","messageId":"139","endLine":196,"endColumn":49},{"ruleId":"136","severity":1,"message":"140","line":259,"column":51,"nodeType":"138","messageId":"139","endLine":259,"endColumn":53},{"ruleId":"136","severity":1,"message":"140","line":277,"column":51,"nodeType":"138","messageId":"139","endLine":277,"endColumn":53},{"ruleId":"141","severity":1,"message":"142","line":11,"column":5,"nodeType":"143","messageId":"144","endLine":15,"endColumn":6},{"ruleId":"141","severity":1,"message":"142","line":10,"column":5,"nodeType":"143","messageId":"144","endLine":13,"endColumn":6},{"ruleId":"141","severity":1,"message":"142","line":10,"column":5,"nodeType":"143","messageId":"144","endLine":14,"endColumn":6},{"ruleId":"136","severity":1,"message":"140","line":40,"column":96,"nodeType":"138","messageId":"139","endLine":40,"endColumn":98},{"ruleId":"136","severity":1,"message":"140","line":75,"column":81,"nodeType":"138","messageId":"139","endLine":75,"endColumn":83},{"ruleId":"136","severity":1,"message":"140","line":119,"column":89,"nodeType":"138","messageId":"139","endLine":119,"endColumn":91},{"ruleId":"136","severity":1,"message":"140","line":139,"column":93,"nodeType":"138","messageId":"139","endLine":139,"endColumn":95},{"ruleId":"145","severity":1,"message":"146","line":45,"column":21,"nodeType":"147","endLine":45,"endColumn":42},{"ruleId":"145","severity":1,"message":"146","line":49,"column":25,"nodeType":"147","endLine":49,"endColumn":82},{"ruleId":"145","severity":1,"message":"146","line":58,"column":25,"nodeType":"147","endLine":58,"endColumn":84},{"ruleId":"145","severity":1,"message":"146","line":65,"column":21,"nodeType":"147","endLine":65,"endColumn":74},{"ruleId":"145","severity":1,"message":"146","line":71,"column":25,"nodeType":"147","endLine":71,"endColumn":78},{"ruleId":"141","severity":1,"message":"142","line":6,"column":5,"nodeType":"143","messageId":"144","endLine":10,"endColumn":6},{"ruleId":"141","severity":1,"message":"142","line":6,"column":5,"nodeType":"143","messageId":"144","endLine":10,"endColumn":6},{"ruleId":"141","severity":1,"message":"142","line":8,"column":5,"nodeType":"143","messageId":"144","endLine":12,"endColumn":6},{"ruleId":"136","severity":1,"message":"140","line":68,"column":27,"nodeType":"138","messageId":"139","endLine":68,"endColumn":29},{"ruleId":"136","severity":1,"message":"140","line":102,"column":57,"nodeType":"138","messageId":"139","endLine":102,"endColumn":59},{"ruleId":"136","severity":1,"message":"140","line":132,"column":57,"nodeType":"138","messageId":"139","endLine":132,"endColumn":59},{"ruleId":"136","severity":1,"message":"140","line":52,"column":30,"nodeType":"138","messageId":"139","endLine":52,"endColumn":32},{"ruleId":"136","severity":1,"message":"140","line":56,"column":35,"nodeType":"138","messageId":"139","endLine":56,"endColumn":37},{"ruleId":"136","severity":1,"message":"140","line":90,"column":25,"nodeType":"138","messageId":"139","endLine":90,"endColumn":27},{"ruleId":"136","severity":1,"message":"140","line":90,"column":45,"nodeType":"138","messageId":"139","endLine":90,"endColumn":47},{"ruleId":"136","severity":1,"message":"140","line":97,"column":65,"nodeType":"138","messageId":"139","endLine":97,"endColumn":67},{"ruleId":"136","severity":1,"message":"140","line":101,"column":81,"nodeType":"138","messageId":"139","endLine":101,"endColumn":83},{"ruleId":"136","severity":1,"message":"140","line":113,"column":61,"nodeType":"138","messageId":"139","endLine":113,"endColumn":63},{"ruleId":"145","severity":1,"message":"146","line":45,"column":21,"nodeType":"147","endLine":45,"endColumn":44},{"ruleId":"148","severity":1,"message":"149","line":2,"column":16,"nodeType":"150","messageId":"151","endLine":2,"endColumn":29},{"ruleId":"136","severity":1,"message":"140","line":7,"column":37,"nodeType":"138","messageId":"139","endLine":7,"endColumn":39},{"ruleId":"136","severity":1,"message":"137","line":7,"column":59,"nodeType":"138","messageId":"139","endLine":7,"endColumn":61},{"ruleId":"136","severity":1,"message":"140","line":7,"column":82,"nodeType":"138","messageId":"139","endLine":7,"endColumn":84},{"ruleId":"141","severity":1,"message":"142","line":5,"column":5,"nodeType":"143","messageId":"144","endLine":9,"endColumn":6},"no-native-reassign",["152"],"no-negated-in-lhs",["153"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'createContext' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]