[{"D:\\ReactProjects\\lite-lineage\\src\\index.js":"1","D:\\ReactProjects\\lite-lineage\\src\\App.js":"2","D:\\ReactProjects\\lite-lineage\\src\\reportWebVitals.js":"3","D:\\ReactProjects\\lite-lineage\\src\\components\\Content.jsx":"4","D:\\ReactProjects\\lite-lineage\\src\\components\\Header.jsx":"5","D:\\ReactProjects\\lite-lineage\\src\\components\\Footer.jsx":"6","D:\\ReactProjects\\lite-lineage\\src\\components\\StartView.jsx":"7","D:\\ReactProjects\\lite-lineage\\src\\components\\FamilyView.jsx":"8","D:\\ReactProjects\\lite-lineage\\src\\components\\FamilyMember.jsx":"9","D:\\ReactProjects\\lite-lineage\\src\\components\\SideDrawer.jsx":"10","D:\\ReactProjects\\lite-lineage\\src\\components\\FamilyMemberExtension.jsx":"11","D:\\ReactProjects\\lite-lineage\\src\\components\\NavInFamily.jsx":"12","D:\\ReactProjects\\lite-lineage\\src\\FamilyTree.js":"13","D:\\ReactProjects\\lite-lineage\\src\\Person.js":"14","D:\\ReactProjects\\lite-lineage\\src\\components\\SideDrawerEditMemberForm.jsx":"15","D:\\ReactProjects\\lite-lineage\\src\\components\\StartTreeButton.jsx":"16","D:\\ReactProjects\\lite-lineage\\src\\TreeContext.js":"17","D:\\ReactProjects\\lite-lineage\\src\\components\\SpecialDateInput.jsx":"18","D:\\ReactProjects\\lite-lineage\\src\\Helpers.js":"19"},{"size":500,"mtime":499162500000,"results":"20","hashOfConfig":"21"},{"size":8515,"mtime":1610201626197,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":499162500000,"results":"23","hashOfConfig":"21"},{"size":592,"mtime":1610045473535,"results":"24","hashOfConfig":"21"},{"size":555,"mtime":1610045347870,"results":"25","hashOfConfig":"21"},{"size":280,"mtime":1609793104158,"results":"26","hashOfConfig":"21"},{"size":1374,"mtime":1610045363915,"results":"27","hashOfConfig":"21"},{"size":4601,"mtime":1610386537165,"results":"28","hashOfConfig":"21"},{"size":3686,"mtime":1610376532029,"results":"29","hashOfConfig":"21"},{"size":706,"mtime":1610134593881,"results":"30","hashOfConfig":"21"},{"size":586,"mtime":1609789001400,"results":"31","hashOfConfig":"21"},{"size":883,"mtime":1610045827125,"results":"32","hashOfConfig":"21"},{"size":4230,"mtime":1610388808060,"results":"33","hashOfConfig":"21"},{"size":3472,"mtime":1610383655929,"results":"34","hashOfConfig":"21"},{"size":8697,"mtime":1610296797145,"results":"35","hashOfConfig":"21"},{"size":1832,"mtime":1610045360126,"results":"36","hashOfConfig":"21"},{"size":313,"mtime":1610045323469,"results":"37","hashOfConfig":"21"},{"size":3702,"mtime":1610225479168,"results":"38","hashOfConfig":"21"},{"size":1633,"mtime":1610383895776,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"19gfp4v",{"filePath":"43","messages":"44","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"42"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"42"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\ReactProjects\\lite-lineage\\src\\index.js",[],["88","89"],"D:\\ReactProjects\\lite-lineage\\src\\App.js",["90","91","92","93","94","95"],"// import logo from './logo.svg';\nimport './App.css';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Content from './components/Content';\nimport React, { Component } from 'react';\n// import Cookies from 'js-cookies';\nimport FamilyTree from './FamilyTree';\nimport Person from './Person';\nimport TreeContext from './TreeContext';\n\nclass App extends Component\n{\n  constructor(props)\n  {\n      super(props);\n      this.state = {\n        treeNames: this.loadTreeNames(), //array of treeNames\n        isInTree: false,\n        currentTree: null //null when none loaded, otherwise an instance of FamilyTree class\n      }\n      this.handleNewTree = this.handleNewTree.bind(this);\n      this.handleDeleteTree = this.handleDeleteTree.bind(this);\n      this.handleExitTree = this.handleExitTree.bind(this);\n      this.handleRenameTree = this.handleRenameTree.bind(this);\n      this.handleOpenTree = this.handleOpenTree.bind(this);\n      \n      this.handleAddFamMember = this.handleAddFamMember.bind(this);\n      this.handleDeleteFamMember = this.handleDeleteFamMember.bind(this);\n      this.handleEditFamMember = this.handleEditFamMember.bind(this);\n\n      this.treeHandlers = {\n        handleNewTree: this.handleNewTree,\n        handleDeleteTree: this.handleDeleteTree,\n        handleExitTree: this.handleExitTree,\n        handleRenameTree: this.handleRenameTree,\n        handleOpenTree: this.handleOpenTree,\n      };\n\n      //similar thing with this:\n      this.familyHandlers = {\n        handleAddFamMember: this.handleAddFamMember,\n        handleDeleteFamMember: this.handleDeleteFamMember,\n        handleEditFamMember: this.handleEditFamMember,\n      };\n  }\n\n  loadTreeNames()\n  {\n    const namesStr = localStorage.getItem(\"treeNames\");\n    const separator = \"~\";\n    if (namesStr)\n    {\n      return namesStr.split(separator).filter(str => str !== \"\");\n    }\n    else\n    {\n      return [];\n    }\n  }\n\n  saveTreeNames()\n  {\n    localStorage.setItem(\"treeNames\", this.state.treeNames.join(\"~\"));\n    //console.log(\"saved, \" + this.state.treeNames.toString());\n  }\n\n  loadTree(treeName)\n  {\n    if (treeName)\n    {\n      const loadedTreeStr = localStorage.getItem(treeName);\n      if (loadedTreeStr)\n      {\n        const treeObj = new FamilyTree(treeName, Date(), []);\n        treeObj.fillDataFromJSON(loadedTreeStr);\n        return treeObj;\n      }\n      else\n      {\n        console.error(\"Loading tree \" + treeName + \" failed, string from localStorage is falsey.\");\n        return null;\n      }\n    }\n    else\n    {\n      console.error(\"Loading tree \" + treeName + \" failed, this name is falsey.\");\n      return null;\n    }\n  }\n\n  handleNewTree()\n  {\n    //console.log(\"trying to make tree\");\n    const newName = FamilyTree.makeNewName(this.state.treeNames);\n    const newTree = new FamilyTree(newName, Date(), []);\n    this.setState({\n      treeNames: [...this.state.treeNames, newName],\n      currentTree: newTree,\n      isInTree: true\n    }, () => {\n        this.saveTreeNames();\n        newTree.save();\n        console.log(this.state);\n      }\n    );\n  }\n\n  handleDeleteTree(nameOfTreeToDelete)\n  {\n    //console.log(\"trying to delete \" + nameOfTreeToDelete);\n    localStorage.removeItem(nameOfTreeToDelete);\n    this.setState(\n      {\n        treeNames: this.state.treeNames.filter(item => item !== nameOfTreeToDelete)\n      },\n      () => {\n        this.saveTreeNames();\n        //console.log(this.state);\n      }\n    );\n  }\n\n  handleRenameTree(oldTreeName, newTreeName)\n  {\n    if (oldTreeName === newTreeName || this.state.currentTree.treeName !== oldTreeName || !this.state.treeNames.includes(oldTreeName) || this.state.treeNames.includes(newTreeName))\n    {\n      console.log(\"handleRenameTree was ignored.\");\n      return;\n    }\n\n    let newTreeNames = [...this.state.treeNames];\n    const i = newTreeNames.indexOf(oldTreeName);\n    newTreeNames[i] = newTreeName;\n\n    let copyOfCurrentTree = {...this.state.currentTree};\n    copyOfCurrentTree.treeName = newTreeName;\n    this.setState(\n      {\n        treeNames: newTreeNames,\n        currentTree: copyOfCurrentTree\n      },\n      () => {\n        this.saveTreeNames();\n        this.state.currentTree.save();\n      }\n    );\n  }\n\n  handleOpenTree(treeName)\n  {\n    const loaded = this.loadTree(treeName);\n    if (loaded !== null)\n    {\n      this.setState({\n        currentTree: loaded,\n        isInTree: true\n      });\n    }\n  }\n\n  handleExitTree()\n  {\n    this.state.currentTree.save();\n    this.setState({\n      currentTree: null,\n      isInTree: false\n    });\n  }\n\n  addFamMember(person)\n  {\n    if (person)\n    {\n      console.log(\"Adding family member: \" + person.getDisplayName() + \", id will be: \" + person.id);\n      const newFamily = [...this.state.currentTree.family, person];\n      //since a person might be added as a child or parent of some other exisitng person\n      //this needs to be updated in those family members too\n      //they can be mutated directly since a whole tree will be assigned in setState anyway\n      if (person.parentId0 != undefined)\n      {\n        const parentIndex = newFamily.findIndex(item => item.id == person.parentId0);\n        if (parentIndex >= 0)\n        {\n          //making the parent of newly added person have its id in childrenIds[]\n          newFamily[parentIndex].childrenIds.push(person.id);\n        }\n      }\n      for(let i = 0; i < person.childrenIds.length; i++)\n      {\n        const childIndex = newFamily.findIndex(item => item.id == person.childrenIds[i]);\n        if (childIndex >= 0)\n        {\n          //making the i-th child of newly added person have its id in one of the 2 parent slots\n          //it will override the second parent if both are taken\n          if (newFamily[childIndex].parentId0 == undefined)\n          {\n            newFamily[childIndex].parentId0 = person.id;\n          }\n          else\n          {\n            newFamily[childIndex].parentId1 = person.id;\n          }\n        }\n      }\n      const draftTree = FamilyTree.cloneFromOther(this.state.currentTree);\n      draftTree.family = newFamily;\n      this.setState(\n        {\n          currentTree: draftTree,\n        },\n        () => {this.state.currentTree.save();}\n      );\n    }\n  }\n\n  handleAddFamMember(mode = \"default\", locationX, locationY, anchorPersonId)\n  {\n    if (!this.state.currentTree){return;}\n    const viableModes = [\"default\", \"parent\", \"child\"];\n    if (viableModes.includes(mode))\n    {\n      const newId = this.state.currentTree.findLowestUnusedFamilyMemberId();  \n      const newPerson = new Person(newId);\n      newPerson.locationInTreeX = locationX;\n      newPerson.locationInTreeY = locationY;\n      if (anchorPersonId !== undefined && anchorPersonId >= 0)\n      {\n        if(mode === \"parent\")\n        {\n          newPerson.childrenIds.push(anchorPersonId);\n        }\n        else if(mode === \"child\")\n        {\n          newPerson.parentId0 = anchorPersonId;\n        }\n      }\n      this.addFamMember(newPerson);\n    }\n    else\n    {\n      console.error(\"Invalid mode of adding a family member.\");\n    }\n  }\n\n  handleEditFamMember(personId, replacerPersonObj)\n  {\n    //edited data should already be validated before it gets here\n    //console.log(\"handling edit of person with id: \" + personId + \" (should match this one: \"+ replacerPersonObj.id +\")\");\n    const newFamily = [...this.state.currentTree.family];\n    const i = newFamily.findIndex(item => item.id == personId);\n    if (i >= 0)\n    {\n      newFamily[i] = replacerPersonObj;\n      const draftTree = FamilyTree.cloneFromOther(this.state.currentTree);\n      draftTree.family = newFamily;\n      this.setState(\n        {\n          currentTree: draftTree,\n        },\n        () => {this.state.currentTree.save();}\n      );\n    }\n  }\n\n  handleDeleteFamMember(personId)\n  {\n    const newFamily = [...this.state.currentTree.family];\n    const i = newFamily.findIndex(item => item.id == personId);\n    if (i >= 0)\n    {\n      newFamily.splice(i, 1);\n      const draftTree = FamilyTree.cloneFromOther(this.state.currentTree);\n      draftTree.family = newFamily;\n      this.setState(\n        {\n          currentTree: draftTree,\n        },\n        () => {this.state.currentTree.save();}\n      );\n    }\n  }\n\n  render()\n  {\n    return (\n      <TreeContext.Provider className=\"app\" value={{...this.state, treeHandlers: this.treeHandlers, familyHandlers: this.familyHandlers}}>\n        <Header/>\n        <Content/>\n        <Footer/>\n      </TreeContext.Provider>\n    );\n  }\n}\n\nexport default App;","D:\\ReactProjects\\lite-lineage\\src\\reportWebVitals.js",[],"D:\\ReactProjects\\lite-lineage\\src\\components\\Content.jsx",["96"],"import React, { Component } from 'react';\r\nimport FamilyView from './FamilyView';\r\nimport StartView from './StartView';\r\nimport '../App.css';\r\nimport TreeContext from '../TreeContext';\r\n\r\nclass Content extends Component\r\n{\r\n    static contextType = TreeContext;\r\n\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        //this.state = {}\r\n    }\r\n    \r\n    render()\r\n    {\r\n        return (\r\n            <div className=\"main_content\">\r\n                {(this.context.isInTree === true) ? <FamilyView/> : <StartView/>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Content;","D:\\ReactProjects\\lite-lineage\\src\\components\\Header.jsx",["97"],"import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport NavInFamily from './NavInFamily';\r\nimport TreeContext from '../TreeContext';\r\n\r\nclass Header extends Component\r\n{\r\n    static contextType = TreeContext;\r\n\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n    }\r\n\r\n    //state = {  }\r\n    render()\r\n    {\r\n        return(\r\n        <header className=\"main_header\">\r\n            <h1>LiteLineage</h1>\r\n            {this.context.isInTree === true && <NavInFamily/>}\r\n        </header>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Header;","D:\\ReactProjects\\lite-lineage\\src\\components\\Footer.jsx",[],"D:\\ReactProjects\\lite-lineage\\src\\components\\StartView.jsx",["98"],"import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport StartTreeButton from './StartTreeButton';\r\nimport TreeContext from '../TreeContext';\r\n\r\nclass StartView extends Component\r\n{\r\n    static contextType = TreeContext;\r\n\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        //this.state = {tryingToDeleteTree: false}\r\n    }\r\n\r\n    render()\r\n    { \r\n        const treeButtons = this.context.treeNames.map((treeName) =>\r\n            <StartTreeButton treeName={treeName} key={treeName}/>\r\n        );\r\n\r\n        return (\r\n            <div className=\"start_view\">\r\n                <div className=\"start_box\">\r\n                    <h2>Welcome to LiteLineage</h2>\r\n                    <p className=\"start_desc\">A simple tool for making family trees, with all key family data kept on your machine and no need to create an account. To begin, create a new tree, or pick an existing one.</p>\r\n                    <div className=\"start_button_tray\">\r\n                        {treeButtons}\r\n                        <div className=\"start_button_wrapper\">\r\n                            <button className=\"start_button start_button_special\" onClick={this.context.treeHandlers.handleNewTree}>NEW TREE</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default StartView;","D:\\ReactProjects\\lite-lineage\\src\\components\\FamilyView.jsx",["99","100","101"],"D:\\ReactProjects\\lite-lineage\\src\\components\\FamilyMember.jsx",["102","103","104","105","106"],"D:\\ReactProjects\\lite-lineage\\src\\components\\SideDrawer.jsx",["107"],"import React, { Component } from 'react';\r\nimport '../App.css';\r\n\r\nclass SideDrawer extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        //this.state = {}\r\n    }\r\n    \r\n    render()\r\n    {\r\n        return (\r\n            <div className=\"side_drawer\">\r\n                <div className=\"side_drawer_bar\">\r\n                    <h3>{this.props.name}</h3>\r\n                    <button className=\"side_drawer_close_button\" onClick={this.props.closeAction}>x</button>\r\n                </div>\r\n                <div className=\"side_drawer_content\">\r\n                    {this.props.content}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SideDrawer;","D:\\ReactProjects\\lite-lineage\\src\\components\\FamilyMemberExtension.jsx",["108"],"import React, { Component } from 'react';\r\nimport '../App.css';\r\n\r\nclass FamilyMemberExtension extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        //this.state = {}\r\n    }\r\n    \r\n    render()\r\n    {\r\n        return (\r\n            <div className=\"family_member_extended\">\r\n                <p className=\"family_member_info\">Eye color: brown</p>\r\n                <p className=\"family_member_info\">Hair color: black</p>\r\n                <p className=\"family_member_info\"></p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FamilyMemberExtension;","D:\\ReactProjects\\lite-lineage\\src\\components\\NavInFamily.jsx",["109"],"import React, { Component } from 'react';\r\nimport TreeContext from '../TreeContext';\r\n\r\nclass NavInFamily extends Component\r\n{\r\n    static contextType = TreeContext;\r\n\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        //this.state = {}\r\n    }\r\n    \r\n    render()\r\n    {\r\n        return (\r\n            <nav className=\"main_nav\">\r\n                {/* <button className=\"header_button\">EXPORT</button> */}\r\n                <button className=\"header_button\" onClick={this.context.familyHandlers.handleAddFamMember.bind(this, \"default\", 0, 0)}>\r\n                    NEW PERSON\r\n                </button>\r\n                {/* <button className=\"header_button\">HIGHLIGHT: OFF</button> */}\r\n                <button className=\"header_button\" onClick={this.context.treeHandlers.handleExitTree}>EXIT</button>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavInFamily;","D:\\ReactProjects\\lite-lineage\\src\\FamilyTree.js",["110","111"],"D:\\ReactProjects\\lite-lineage\\src\\Person.js",["112","113"],"D:\\ReactProjects\\lite-lineage\\src\\components\\SideDrawerEditMemberForm.jsx",[],"D:\\ReactProjects\\lite-lineage\\src\\components\\StartTreeButton.jsx",["114"],"import React, { Component } from 'react';\r\nimport IconDelete from '../icons/icon_delete.svg';\r\nimport TreeContext from '../TreeContext';\r\n\r\nclass StartTreeButton extends Component\r\n{\r\n    static contextType = TreeContext;\r\n\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {tryingToDelete: false}\r\n        this.handleCancelingDelete = this.handleCancelingDelete.bind(this);\r\n        this.handleTryingToDelete = this.handleTryingToDelete.bind(this);\r\n    }\r\n\r\n    handleTryingToDelete()\r\n    {\r\n        this.setState({tryingToDelete: true});\r\n    }\r\n\r\n    handleCancelingDelete()\r\n    {\r\n        this.setState({tryingToDelete: false});\r\n    }\r\n    \r\n    render()\r\n    {\r\n        const confirmation = (\r\n            <div className=\"start_button_delete_confirmation\">\r\n                <p>{\"Do you really want to delete \" + this.props.treeName + \"?\"}</p>\r\n                <div>\r\n                    <button className=\"confirmation_button_warning\" onClick={this.context.treeHandlers.handleDeleteTree.bind(this, this.props.treeName)}>YES</button>\r\n                    <button className=\"confirmation_button_neutral\" onClick={this.handleCancelingDelete}>NO</button>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        return (\r\n            <div className=\"start_button_wrapper\">\r\n                <button onClick={this.context.treeHandlers.handleOpenTree.bind(this, this.props.treeName)} className=\"start_button\">\r\n                    {this.props.treeName}\r\n                </button>\r\n                <button onClick={this.handleTryingToDelete} className=\"start_button_delete\">\r\n                    <img src={IconDelete}/>\r\n                </button>\r\n                {(this.state.tryingToDelete === true && confirmation)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StartTreeButton;","D:\\ReactProjects\\lite-lineage\\src\\TreeContext.js",["115"],"//import { createContext } from \"react\";\r\nimport React, {createContext} from 'react';\r\n\r\nconst TreeContext = React.createContext(\r\n    {\r\n        currentTree: null,\r\n        isInTree: false,\r\n        treeNames:[],\r\n\r\n        treeHandlers: {},\r\n        familyHandlers: {},\r\n    }\r\n);\r\n\r\nexport default TreeContext;","D:\\ReactProjects\\lite-lineage\\src\\components\\SpecialDateInput.jsx",[],"D:\\ReactProjects\\lite-lineage\\src\\Helpers.js",["116","117","118"],{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","severity":1,"message":"124","line":180,"column":28,"nodeType":"125","messageId":"126","endLine":180,"endColumn":30},{"ruleId":"123","severity":1,"message":"127","line":182,"column":65,"nodeType":"125","messageId":"126","endLine":182,"endColumn":67},{"ruleId":"123","severity":1,"message":"127","line":191,"column":64,"nodeType":"125","messageId":"126","endLine":191,"endColumn":66},{"ruleId":"123","severity":1,"message":"127","line":196,"column":47,"nodeType":"125","messageId":"126","endLine":196,"endColumn":49},{"ruleId":"123","severity":1,"message":"127","line":251,"column":51,"nodeType":"125","messageId":"126","endLine":251,"endColumn":53},{"ruleId":"123","severity":1,"message":"127","line":269,"column":51,"nodeType":"125","messageId":"126","endLine":269,"endColumn":53},{"ruleId":"128","severity":1,"message":"129","line":11,"column":5,"nodeType":"130","messageId":"131","endLine":15,"endColumn":6},{"ruleId":"128","severity":1,"message":"129","line":10,"column":5,"nodeType":"130","messageId":"131","endLine":13,"endColumn":6},{"ruleId":"128","severity":1,"message":"129","line":10,"column":5,"nodeType":"130","messageId":"131","endLine":14,"endColumn":6},{"ruleId":"123","severity":1,"message":"127","line":39,"column":96,"nodeType":"125","messageId":"126","endLine":39,"endColumn":98},{"ruleId":"123","severity":1,"message":"127","line":64,"column":81,"nodeType":"125","messageId":"126","endLine":64,"endColumn":83},{"ruleId":"123","severity":1,"message":"127","line":102,"column":93,"nodeType":"125","messageId":"126","endLine":102,"endColumn":95},{"ruleId":"132","severity":1,"message":"133","line":45,"column":21,"nodeType":"134","endLine":45,"endColumn":42},{"ruleId":"132","severity":1,"message":"133","line":49,"column":25,"nodeType":"134","endLine":49,"endColumn":82},{"ruleId":"132","severity":1,"message":"133","line":58,"column":25,"nodeType":"134","endLine":58,"endColumn":84},{"ruleId":"132","severity":1,"message":"133","line":65,"column":21,"nodeType":"134","endLine":65,"endColumn":74},{"ruleId":"132","severity":1,"message":"133","line":71,"column":25,"nodeType":"134","endLine":71,"endColumn":78},{"ruleId":"128","severity":1,"message":"129","line":6,"column":5,"nodeType":"130","messageId":"131","endLine":10,"endColumn":6},{"ruleId":"128","severity":1,"message":"129","line":6,"column":5,"nodeType":"130","messageId":"131","endLine":10,"endColumn":6},{"ruleId":"128","severity":1,"message":"129","line":8,"column":5,"nodeType":"130","messageId":"131","endLine":12,"endColumn":6},{"ruleId":"123","severity":1,"message":"127","line":68,"column":27,"nodeType":"125","messageId":"126","endLine":68,"endColumn":29},{"ruleId":"123","severity":1,"message":"127","line":91,"column":57,"nodeType":"125","messageId":"126","endLine":91,"endColumn":59},{"ruleId":"123","severity":1,"message":"127","line":52,"column":30,"nodeType":"125","messageId":"126","endLine":52,"endColumn":32},{"ruleId":"123","severity":1,"message":"127","line":56,"column":35,"nodeType":"125","messageId":"126","endLine":56,"endColumn":37},{"ruleId":"132","severity":1,"message":"133","line":45,"column":21,"nodeType":"134","endLine":45,"endColumn":44},{"ruleId":"135","severity":1,"message":"136","line":2,"column":16,"nodeType":"137","messageId":"138","endLine":2,"endColumn":29},{"ruleId":"123","severity":1,"message":"127","line":7,"column":37,"nodeType":"125","messageId":"126","endLine":7,"endColumn":39},{"ruleId":"123","severity":1,"message":"124","line":7,"column":59,"nodeType":"125","messageId":"126","endLine":7,"endColumn":61},{"ruleId":"123","severity":1,"message":"127","line":7,"column":82,"nodeType":"125","messageId":"126","endLine":7,"endColumn":84},"no-native-reassign",["139"],"no-negated-in-lhs",["140"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'createContext' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]