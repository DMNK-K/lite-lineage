[{"D:\\ReactProjects\\lite-lineage\\src\\index.js":"1","D:\\ReactProjects\\lite-lineage\\src\\App.js":"2","D:\\ReactProjects\\lite-lineage\\src\\reportWebVitals.js":"3","D:\\ReactProjects\\lite-lineage\\src\\components\\Content.jsx":"4","D:\\ReactProjects\\lite-lineage\\src\\components\\Header.jsx":"5","D:\\ReactProjects\\lite-lineage\\src\\components\\Footer.jsx":"6","D:\\ReactProjects\\lite-lineage\\src\\components\\StartView.jsx":"7","D:\\ReactProjects\\lite-lineage\\src\\components\\FamilyView.jsx":"8","D:\\ReactProjects\\lite-lineage\\src\\components\\FamilyMember.jsx":"9","D:\\ReactProjects\\lite-lineage\\src\\components\\SideDrawer.jsx":"10","D:\\ReactProjects\\lite-lineage\\src\\components\\FamilyMemberExtension.jsx":"11","D:\\ReactProjects\\lite-lineage\\src\\components\\NavInFamily.jsx":"12","D:\\ReactProjects\\lite-lineage\\src\\FamilyTree.js":"13","D:\\ReactProjects\\lite-lineage\\src\\Person.js":"14","D:\\ReactProjects\\lite-lineage\\src\\components\\SideDrawerEditMemberForm.jsx":"15","D:\\ReactProjects\\lite-lineage\\src\\components\\StartTreeButton.jsx":"16","D:\\ReactProjects\\lite-lineage\\src\\TreeContext.js":"17","D:\\ReactProjects\\lite-lineage\\src\\components\\SpecialDateInput.jsx":"18","D:\\ReactProjects\\lite-lineage\\src\\Helpers.js":"19","D:\\ReactProjects\\lite-lineage\\src\\components\\FamilyConnection.jsx":"20","D:\\ReactProjects\\lite-lineage\\src\\components\\ConnectionRenderer.jsx":"21","D:\\ReactProjects\\lite-lineage\\src\\components\\SelectParent.jsx":"22","D:\\ReactProjects\\lite-lineage\\src\\geo\\V2.js":"23"},{"size":500,"mtime":499162500000,"results":"24","hashOfConfig":"25"},{"size":10594,"mtime":1611432684632,"results":"26","hashOfConfig":"25"},{"size":362,"mtime":499162500000,"results":"27","hashOfConfig":"25"},{"size":592,"mtime":1610045473535,"results":"28","hashOfConfig":"25"},{"size":2305,"mtime":1610568177174,"results":"29","hashOfConfig":"25"},{"size":280,"mtime":1609793104158,"results":"30","hashOfConfig":"25"},{"size":3042,"mtime":1610730003971,"results":"31","hashOfConfig":"25"},{"size":9106,"mtime":1611242978479,"results":"32","hashOfConfig":"25"},{"size":3867,"mtime":1611432423577,"results":"33","hashOfConfig":"25"},{"size":706,"mtime":1610134593881,"results":"34","hashOfConfig":"25"},{"size":1233,"mtime":1611154795724,"results":"35","hashOfConfig":"25"},{"size":1397,"mtime":1610649766940,"results":"36","hashOfConfig":"25"},{"size":8604,"mtime":1611159951168,"results":"37","hashOfConfig":"25"},{"size":6385,"mtime":1611162220961,"results":"38","hashOfConfig":"25"},{"size":12408,"mtime":1611442914563,"results":"39","hashOfConfig":"25"},{"size":1832,"mtime":1610045360126,"results":"40","hashOfConfig":"25"},{"size":313,"mtime":1610045323469,"results":"41","hashOfConfig":"25"},{"size":5478,"mtime":1611446884344,"results":"42","hashOfConfig":"25"},{"size":2540,"mtime":1610910066241,"results":"43","hashOfConfig":"25"},{"size":3199,"mtime":1611339898650,"results":"44","hashOfConfig":"25"},{"size":327,"mtime":1610546192417,"results":"45","hashOfConfig":"25"},{"size":1076,"mtime":1611438985631,"results":"46","hashOfConfig":"25"},{"size":11231,"mtime":1611340554765,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"19gfp4v",{"filePath":"51","messages":"52","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"50"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"50"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"50"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"50"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"50"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"50"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"50"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"50"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"50"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"50"},"D:\\ReactProjects\\lite-lineage\\src\\index.js",[],["107","108"],"D:\\ReactProjects\\lite-lineage\\src\\App.js",["109","110","111","112","113"],"D:\\ReactProjects\\lite-lineage\\src\\reportWebVitals.js",[],"D:\\ReactProjects\\lite-lineage\\src\\components\\Content.jsx",["114"],"import React, { Component } from 'react';\r\nimport FamilyView from './FamilyView';\r\nimport StartView from './StartView';\r\nimport '../App.css';\r\nimport TreeContext from '../TreeContext';\r\n\r\nclass Content extends Component\r\n{\r\n    static contextType = TreeContext;\r\n\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        //this.state = {}\r\n    }\r\n    \r\n    render()\r\n    {\r\n        return (\r\n            <div className=\"main_content\">\r\n                {(this.context.isInTree === true) ? <FamilyView/> : <StartView/>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Content;","D:\\ReactProjects\\lite-lineage\\src\\components\\Header.jsx",[],"D:\\ReactProjects\\lite-lineage\\src\\components\\Footer.jsx",[],"D:\\ReactProjects\\lite-lineage\\src\\components\\StartView.jsx",[],"D:\\ReactProjects\\lite-lineage\\src\\components\\FamilyView.jsx",["115","116","117","118","119","120"],"import React, { Component } from 'react';\r\nimport SideDrawer from './SideDrawer';\r\nimport FamilyMember from './FamilyMember';\r\nimport SideDrawerEditMemberForm from './SideDrawerEditMemberForm';\r\nimport '../App.css';\r\nimport TreeContext from '../TreeContext';\r\nimport Person from '../Person';\r\nimport Helpers from '../Helpers';\r\nimport ConnectionRenderer from './ConnectionRenderer';\r\nimport FamilyConnection from './FamilyConnection';\r\n\r\nclass FamilyView extends Component\r\n{\r\n    static contextType = TreeContext;\r\n    #zoomMin = 0;\r\n    #zoomMax = 4;\r\n    #locationScalesByZoom = [20, 30, 40, 60, 80];\r\n    #lineCenteringOffsetByZoom = [\r\n        {x: 40, y: 20},\r\n        {x: 60, y: 30},\r\n        {x: 80, y: 40},\r\n        {x: 120, y: 60},\r\n        {x: 160, y: 80}\r\n    ];\r\n\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {\r\n            editingPerson: false,\r\n            editedPersonId: null,\r\n            zoomLvl: 2,\r\n            locationScale: 40,\r\n            stretcherOverhead: {x: 7, y: 5},\r\n            isDragging: false,\r\n            draggedId: null,\r\n            lineCenteringOffset: {x: 80, y: 40},\r\n        }\r\n        this.startEdit = this.startEdit.bind(this);\r\n        this.reportDeletionToEdit = this.reportDeletionToEdit.bind(this);\r\n        this.endEdit = this.endEdit.bind(this);\r\n        this.startDrag = this.startDrag.bind(this);\r\n        this.tryDrag = this.tryDrag.bind(this);\r\n        this.endDrag = this.endDrag.bind(this);\r\n        this.zoom = this.zoom.bind(this);\r\n    }\r\n\r\n    startEdit(personId)\r\n    {\r\n        this.setState({editingPerson: true, editedPersonId: personId});\r\n    }\r\n\r\n    reportDeletionToEdit(personId)\r\n    {\r\n        if (this.state.editingPerson === true && this.state.editedPersonId != null && personId == this.state.editedPersonId)\r\n        {\r\n            this.endEdit();\r\n        }\r\n    }\r\n\r\n    endEdit()\r\n    {\r\n        this.setState({editingPerson: false, editedPersonId: null});\r\n    }\r\n\r\n    startDrag(personId)\r\n    {\r\n        // console.log(\"starting drag\");\r\n        this.setState({isDragging: true, draggedId: personId});\r\n    }\r\n\r\n    componentDidMount()\r\n    {\r\n        window.addEventListener(\"mouseup\", this.endDrag);\r\n    }\r\n\r\n    componentWillUnmount()\r\n    {\r\n        window.removeEventListener(\"mouseup\", this.endDrag);\r\n    }\r\n\r\n    tryDrag(e, referenceElement)\r\n    {\r\n        //this was the only solution that calculated coords correctly, but it needs a ref element passed somehow\r\n        const offset = Helpers.getRelativeCoords(e.nativeEvent, referenceElement);\r\n        // console.log(\"dragging \"+ this.state.draggedId +\" to [\" + offset.x + \", \" + offset.y + \"]\");\r\n        if (this.state.isDragging === true && this.state.draggedId != null && this.state.draggedId >= 0)\r\n        {\r\n            const newLocation = this.calcLocationFromOffset(offset);\r\n            const i = this.context.currentTree.family.findIndex(item => item.id == this.state.draggedId);\r\n            const draftPerson = Person.cloneFromOther(this.context.currentTree.family[i]);\r\n            // console.log(\"new location: [\" + newLocation.x + \", \" + newLocation.y + \"]\");\r\n            draftPerson.locationInTreeX = newLocation.x;\r\n            draftPerson.locationInTreeY = newLocation.y;\r\n            this.context.familyHandlers.handleEditFamMember(this.state.draggedId, draftPerson);\r\n        }\r\n    }\r\n\r\n    endDrag()\r\n    {\r\n        // console.log(\"ending drag\");\r\n        this.setState({isDragging: false, draggedId: null});\r\n    }\r\n\r\n    calcLocationFromOffset(offset)\r\n    {\r\n        return {\r\n            x: Math.round(offset.x / this.state.locationScale),\r\n            y: Math.round(offset.y / this.state.locationScale)\r\n        };\r\n    }\r\n\r\n    calcCssSizeOfConnectionRenderer()\r\n    {\r\n        //bounds of the tree incremented by 2 in both axis, so the line renderer also acts as a stretcher\r\n        //for the whole area of the tree\r\n        const bounds = this.context.currentTree.getBounds(this.state.stretcherOverhead.x, this.state.stretcherOverhead.y);\r\n        return {\r\n            width: (bounds.x * this.state.locationScale) + \"px\",\r\n            height: (bounds.y * this.state.locationScale) + \"px\"\r\n        };\r\n    }\r\n\r\n    zoom(dir)\r\n    {\r\n        if (dir == 0){return;}\r\n        dir = (dir > 0) ? 1 : -1;\r\n        this.setState((prevState, props) => (\r\n            {\r\n                zoomLvl: prevState.zoomLvl + dir,\r\n                locationScale: this.#locationScalesByZoom[prevState.zoomLvl + dir],\r\n                lineCenteringOffset: this.#lineCenteringOffsetByZoom[prevState.zoomLvl + dir]\r\n            }\r\n        ));\r\n    }\r\n    \r\n    render()\r\n    {\r\n        const familyMembers = this.context.currentTree.family.map((member) =>\r\n            <FamilyMember\r\n                key={member.id}\r\n                person={member}\r\n                familyHandlers={this.context.familyHandlers}\r\n                reportDeletionToEdit={this.reportDeletionToEdit}\r\n                startEdit={this.startEdit}\r\n                locationScale={this.state.locationScale}\r\n                zoomLvl={this.state.zoomLvl}\r\n                startDrag={this.startDrag}\r\n            />\r\n        );\r\n\r\n        //finding people taking part in a connection\r\n        const connectionMembers = [];\r\n        const establishedParentIdPairs = [];\r\n        for (let i = 0; i < this.context.currentTree.family.length; i++)\r\n        {\r\n            const b = this.context.currentTree.family[i];\r\n            const parents = b.getCurrentParents(this.context.currentTree.family);\r\n            if (parents[0] || parents[1])\r\n            {\r\n                //there is a connection that exists for b\r\n                connectionMembers.push({\r\n                    a1: parents[0],\r\n                    a2: parents[1],\r\n                    b: b\r\n                });\r\n\r\n                if (parents[0] && parents[1])\r\n                {\r\n                    //check if this parent pair was already established (checking both orders of being saved since they might differ in different child)\r\n                    //we're doing it in order not to duplicate connections that are suppoosed to represent relationships between 2 people that had children together\r\n                    //since they are distinct from the child-parent connections \r\n                    if (!establishedParentIdPairs.includes(parents[0].id + \"_\" + parents[1].id) && !establishedParentIdPairs.includes(parents[1].id + \"_\" + parents[0].id))\r\n                    {\r\n                        connectionMembers.push({\r\n                            a1: parents[0],\r\n                            a2: parents[1],\r\n                            b: null\r\n                        });\r\n                        establishedParentIdPairs.push(parents[0].id + \"_\" + parents[1].id);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const connections = connectionMembers.map((connectionMember) =>\r\n            <FamilyConnection\r\n                key={connectionMember.a1?.id + \"_\" + connectionMember.a2?.id + \"|\" + connectionMember.b?.id}\r\n                personA1={connectionMember.a1}\r\n                personA2={connectionMember.a2}\r\n                personB={connectionMember.b}\r\n                locationScale={this.state.locationScale}\r\n                lineCenteringOffset={this.state.lineCenteringOffset}\r\n            />\r\n        );\r\n\r\n        const editedPersonIndex = this.context.currentTree.family.findIndex(item => item.id == this.state.editedPersonId);\r\n        const editedPerson = (editedPersonIndex >= 0) ? this.context.currentTree.family[editedPersonIndex] : null;\r\n\r\n        const sideDrawer = (\r\n            <SideDrawer\r\n                name=\"Editing...\"\r\n                content={\r\n                    <SideDrawerEditMemberForm\r\n                        editedPerson={editedPerson}\r\n                        handleEdit={this.context.familyHandlers.handleEditFamMember}\r\n                        handleEditMultiple={this.context.familyHandlers.handleEditFamMembers}\r\n                        family={this.context.currentTree.family}\r\n                    />}\r\n                closeAction={this.endEdit}\r\n            />\r\n        );\r\n\r\n        return (\r\n            <div className=\"family_view\">\r\n                {this.state.editingPerson === true && sideDrawer}\r\n                <div className=\"zoom_wrapper\">\r\n                    <button onClick={this.zoom.bind(this, 1)} disabled={this.state.zoomLvl == this.#zoomMax}>+</button>\r\n                    <button onClick={this.zoom.bind(this, -1)} disabled={this.state.zoomLvl == this.#zoomMin}>-</button>\r\n                </div>\r\n                <div id=\"family_tree\" className=\"family_tree\" onMouseMove={this.state.isDragging ? (e) => this.tryDrag(e, document.getElementById(\"family_tree\")) : undefined}>\r\n                    {familyMembers}\r\n                    <ConnectionRenderer style={this.calcCssSizeOfConnectionRenderer()}>\r\n                        {connections}\r\n                    </ConnectionRenderer>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FamilyView;","D:\\ReactProjects\\lite-lineage\\src\\components\\FamilyMember.jsx",[],"D:\\ReactProjects\\lite-lineage\\src\\components\\SideDrawer.jsx",["121"],"import React, { Component } from 'react';\r\nimport '../App.css';\r\n\r\nclass SideDrawer extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        //this.state = {}\r\n    }\r\n    \r\n    render()\r\n    {\r\n        return (\r\n            <div className=\"side_drawer\">\r\n                <div className=\"side_drawer_bar\">\r\n                    <h3>{this.props.name}</h3>\r\n                    <button className=\"side_drawer_close_button\" onClick={this.props.closeAction}>x</button>\r\n                </div>\r\n                <div className=\"side_drawer_content\">\r\n                    {this.props.content}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SideDrawer;","D:\\ReactProjects\\lite-lineage\\src\\components\\FamilyMemberExtension.jsx",["122"],"import React, { Component, Fragment } from 'react';\r\nimport '../App.css';\r\n\r\nclass FamilyMemberExtension extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        //this.state = {}\r\n    }\r\n    \r\n    render()\r\n    {\r\n        return (\r\n            <div className=\"family_member_extended\">\r\n                <p className=\"family_member_info\">Place of birth: {this.props.person.placeBirth}</p>\r\n                {this.props.person.isDead && \r\n                <Fragment>\r\n                    <p className=\"family_member_info\">Place of death: {this.props.person.placeDeath}</p>\r\n                    <p className=\"family_member_info\">Cause of death: {this.props.person.causeOfDeath}</p>\r\n                </Fragment>\r\n                }\r\n                <p className=\"family_member_info\">Eye color: {this.props.person.colorEyes}</p>\r\n                <p className=\"family_member_info\">Hair color: {this.props.person.colorHair}</p>\r\n                <p className=\"family_member_info\">Health problems: {this.props.person.healthProblems.join(\", \")}</p>\r\n                <p className=\"family_member_info\">Notes: {this.props.person.notes}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FamilyMemberExtension;","D:\\ReactProjects\\lite-lineage\\src\\components\\NavInFamily.jsx",[],"D:\\ReactProjects\\lite-lineage\\src\\FamilyTree.js",["123","124","125"],"import Person from './Person';\r\n\r\nclass FamilyTree\r\n{\r\n    static minFamilyMemberLocation = {x: 1, y: 1};\r\n\r\n    treeName;\r\n    creationDate;\r\n    family = []; //array of instances of Person class\r\n\r\n    constructor(treeName, creationDate, family)\r\n    {\r\n        this.treeName = treeName;\r\n        this.creationDate = creationDate;\r\n        this.family = family;\r\n    }\r\n\r\n    static makeNewName(takenNames)\r\n    {\r\n        let newName = \"My Tree 1\";\r\n        let i = 1;\r\n        while (takenNames.includes(newName))\r\n        {\r\n            i++;\r\n            newName = \"My Tree \" + i;\r\n        }\r\n        return newName;\r\n    }\r\n\r\n    static isFamilyMemberLocationBelowMin(location)\r\n    {\r\n        return (location.x < this.minFamilyMemberLocation.x || location.y < this.minFamilyMemberLocation.y);\r\n    }\r\n\r\n    static getShiftVector(location)\r\n    {\r\n        const x = (location.x < this.minFamilyMemberLocation.x) ? this.minFamilyMemberLocation.x - location.x : 0;\r\n        const y = (location.y < this.minFamilyMemberLocation.y) ? this.minFamilyMemberLocation.y - location.y : 0;\r\n        return {x: x, y: y};\r\n    }\r\n\r\n    static shiftFamily(family, vector)\r\n    {\r\n        for(let i = 0; i < family.length; i++)\r\n        {\r\n            family[i].locationInTreeX += vector.x;\r\n            family[i].locationInTreeY += vector.y;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Shifts location of all members of a provided family by a vector.\r\n     * This returns a new array and also its contents are clones, to provide immutability for react.\r\n     */\r\n    static shiftFamilyImmutably(family, vector)\r\n    {\r\n        const newFam = [];\r\n        let draft;\r\n        for(let i = 0; i < family.length; i++)\r\n        {\r\n            draft = Person.cloneFromOther(family[i]);\r\n            draft.locationInTreeX += vector.x;\r\n            draft.locationInTreeY += vector.y;\r\n            newFam.push(draft);\r\n        }\r\n        return newFam;\r\n    }\r\n\r\n    fillDataFromJSON(unparsedJson)\r\n    {\r\n        this.fillDataFromParsedJSON(JSON.parse(unparsedJson));\r\n    }\r\n\r\n    fillDataFromParsedJSON(parsedJsonObj)\r\n    {\r\n        //used for loading family trees from JSON files\r\n        //the way you would use it is you first create an instance of FamilyTree,\r\n        //then you call this to fill in data, where parsedJsonObj is something JSON.parse() returns\r\n        //this is done (instead of only using the constructor) to preserve instance functions,\r\n        //since JSON.stringify() drops them\r\n        this.treeName = parsedJsonObj.treeName;\r\n        this.creationDate = parsedJsonObj.creationDate;\r\n        this.family.length = 0;\r\n        for(let i = 0; i < parsedJsonObj.family.length; i++)\r\n        {\r\n            const personObj = new Person(parsedJsonObj.family[i].id);\r\n            personObj.fillDataFromParsedJSON(parsedJsonObj.family[i]);\r\n            this.family.push(personObj);\r\n        }\r\n    }\r\n\r\n    fillDataFromOther(otherTree)\r\n    {\r\n        this.treeName = otherTree.treeName;\r\n        this.creationDate = otherTree.creationDate;\r\n        this.family = otherTree.family;\r\n    }\r\n\r\n    findLowestUnusedFamilyMemberId()\r\n    {\r\n        let newId = -1;\r\n        let idExists = true;\r\n        while (idExists)\r\n        {\r\n            newId++;\r\n            idExists = false;\r\n            for(let i = 0; i < this.family.length; i++)\r\n            {\r\n                if (newId == this.family[i].id) {idExists = true;}\r\n            }\r\n        }\r\n        return newId;\r\n    }\r\n\r\n    static cloneFromOther(otherTree)\r\n    {\r\n        return new FamilyTree(otherTree.treeName, otherTree.creationDate, [...otherTree.family]);\r\n    }\r\n\r\n    save()\r\n    {\r\n        localStorage.setItem(this.treeName, JSON.stringify(this));\r\n    }\r\n\r\n    findFreeLocationUpwards(idOfRefPerson, marginX, marginY)\r\n    {\r\n        //upwards dir is -1 since coords are counted from top\r\n        return this.findFreeLocationVertically(idOfRefPerson, marginX, marginY, -1, true, marginX + 1);\r\n    }\r\n\r\n    findFreeLocationDownwards(idOfRefPerson, marginX, marginY)\r\n    {\r\n        return this.findFreeLocationVertically(idOfRefPerson, marginX, marginY, 1, true, marginX + 1);\r\n    }\r\n\r\n    findFreeLocationVertically(idOfRefPerson, marginX, marginY, dir, checkPerifery, periferyRange)\r\n    {\r\n        const i = this.family.findIndex(item => item.id == idOfRefPerson);\r\n        if (i < 0) {return null;}\r\n        const refPerson =  this.family[i];\r\n        const searchRangeY = 100 + marginY;\r\n        for(let i = marginY + 1; i < searchRangeY; i++)\r\n        {\r\n            const y = (dir > 0) ? refPerson.locationInTreeY + i : refPerson.locationInTreeY - i;\r\n            if (this.isLocationFree(refPerson.locationInTreeX, y, marginX, marginY))\r\n            {\r\n                return {x: refPerson.locationInTreeX, y: y};\r\n            }\r\n            //now check perifery a bit to left and right\r\n            if (checkPerifery)\r\n            {\r\n                if (this.isLocationFree(refPerson.locationInTreeX - periferyRange, y, marginX, marginY))\r\n                {\r\n                    return {x: refPerson.locationInTreeX - periferyRange, y: y};\r\n                }\r\n                if (this.isLocationFree(refPerson.locationInTreeX + periferyRange, y, marginX, marginY))\r\n                {\r\n                    return {x: refPerson.locationInTreeX + periferyRange, y: y};\r\n                }\r\n            }\r\n        }\r\n        return {x: 0, y: 0}; //fallback\r\n    }\r\n\r\n    findFreeLocationNearby(idOfRefPerson, marginX, marginY, rangeX, rangeY)\r\n    {\r\n        //searches first to the sides, then moves up or down, first favouring down\r\n        const i = this.family.findIndex(item => item.id == idOfRefPerson);\r\n        if (i < 0) {return null;}\r\n        const refPerson =  this.family[i];\r\n        const searchRangeX = rangeX + marginX;\r\n        const searchRangeY = rangeY + marginY;\r\n        let x;\r\n        //to the sides:\r\n        for(let i = marginX + 1; i < searchRangeX; i++)\r\n        {\r\n            x = refPerson.locationInTreeX - i;\r\n            if (this.isLocationFree(x, refPerson.locationInTreeY, marginX, marginY))\r\n            {\r\n                return {x: x, y: refPerson.locationInTreeY};\r\n            }\r\n            x = refPerson.locationInTreeX + i;\r\n            if (this.isLocationFree(x, refPerson.locationInTreeY, marginX, marginY))\r\n            {\r\n                return {x: x, y: refPerson.locationInTreeY};\r\n            }\r\n        }\r\n        //up and down alternating, with down first, to the sides, proioritizing left\r\n        let y;\r\n        for(let i = marginY + 1; i < searchRangeY; i++)\r\n        {\r\n            for(let q = marginX + 1; q < searchRangeX; q++)\r\n            {\r\n                y = refPerson.locationInTreeY + i;\r\n                x = refPerson.locationInTreeX - q;\r\n                if (this.isLocationFree(x, y, marginX, marginY)) { return {x: x, y: y};}\r\n                x = refPerson.locationInTreeX + q;\r\n                if (this.isLocationFree(x, y, marginX, marginY)) { return {x: x, y: y};}\r\n                y = refPerson.locationInTreeY - i;\r\n                x = refPerson.locationInTreeX - q;\r\n                if (this.isLocationFree(x, y, marginX, marginY)) { return {x: x, y: y};}\r\n                x = refPerson.locationInTreeX + q;\r\n                if (this.isLocationFree(x, y, marginX, marginY)) { return {x: x, y: y};}\r\n            }\r\n        }\r\n        return {x: 0, y: 0}; //fallback\r\n    }\r\n\r\n    isLocationFree(x, y, marginX, marginY)\r\n    {\r\n        const minX = x - marginX;\r\n        const minY = y - marginY;\r\n        const maxX = x + marginX;\r\n        const maxY = y + marginY;\r\n        for(let i = 0; i < this.family.length; i++)\r\n        {\r\n            if (this.family[i].locationInTreeX >= minX && this.family[i].locationInTreeX <= maxX && this.family[i].locationInTreeY >= minY && this.family[i].locationInTreeY <= maxY)\r\n            {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Get maximal locations of family members in this tree, both in x and y axis. Can be stretched by overhead.\r\n     */\r\n    getBounds(overheadX = 0, overheadY = 0)\r\n    {\r\n        const bounds = {x: 0, y: 0};\r\n        for(let i = 0; i < this.family.length; i++)\r\n        {\r\n            if (this.family[i].locationInTreeX > bounds.x) {bounds.x = this.family[i].locationInTreeX;}\r\n            if (this.family[i].locationInTreeY > bounds.y) {bounds.y = this.family[i].locationInTreeY;}\r\n        }\r\n        bounds.x += overheadX;\r\n        bounds.y += overheadY;\r\n        return bounds;\r\n    }\r\n}\r\n\r\nexport default FamilyTree;","D:\\ReactProjects\\lite-lineage\\src\\Person.js",["126","127","128","129","130","131","132","133","134"],"import Helpers from './Helpers';\r\n\r\nclass Person\r\n{\r\n    id;\r\n    locationInTreeX = 0;\r\n    locationInTreeY = 0;\r\n    firstName = \"\";\r\n    secondName = \"\";\r\n    lastName = \"\";\r\n\r\n    parentId0 = null;\r\n    parentId1 = null;\r\n\r\n    isDead = false;\r\n    causeOfDeath = \"\";\r\n    dateBirth;\r\n    dateDeath;\r\n    unknownDateOfBirth = true;\r\n    unknownDateOfDeath = true;\r\n\r\n    useFullDateBirth = false;\r\n    useFullDateDeath = false;\r\n    unsurePreciseYearOfBirth = false;\r\n    unsurePreciseYearOfDeath = false;\r\n\r\n    placeBirth = \"\";\r\n    placeDeath = \"\";\r\n    coordsBirthLat;\r\n    coordsBirthLong;\r\n    coordsDeathLat;\r\n    coordsDeathLong;\r\n\r\n    colorEyes = \"\";\r\n    colorHair = \"\";\r\n    healthProblems = [\"\"];\r\n    notes = \"\";\r\n\r\n    #signUnknown = \"?\";\r\n    #signUnsure = \"X\";\r\n    constructor(id)\r\n    {\r\n        this.id = id;\r\n        this.dateBirth = new Date(1950, 0, 1);\r\n        this.dateDeath = new Date(2000, 0, 1);\r\n    }\r\n    \r\n    fillDataFromParsedJSON(parsedJsonObj)\r\n    {\r\n        for(let property in parsedJsonObj)\r\n        {\r\n            if (parsedJsonObj.hasOwnProperty(property) && this.hasOwnProperty(property))\r\n            {\r\n                //special case for dates since JSON.stringify() makes it into string\r\n                //and then  JSON.parse() reads it as a string\r\n                if (property == \"dateBirth\")\r\n                {\r\n                    this.dateBirth = new Date(parsedJsonObj[property]);\r\n                }\r\n                else if (property == \"dateDeath\")\r\n                {\r\n                    this.dateDeath = new Date(parsedJsonObj[property]);\r\n                }\r\n                else\r\n                {\r\n                    this[property] = parsedJsonObj[property];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    getDisplayName()\r\n    {\r\n        if (this.firstName === \"\" && this.secondName === \"\" && this.lastName === \"\")\r\n        {\r\n            return this.#signUnknown;\r\n        }\r\n        let displayName = (this.firstName.length > 0) ? this.firstName : this.#signUnknown;\r\n        displayName += (this.secondName.length > 0) ? \" \" + this.secondName[0] + \". \" : \" \";\r\n        displayName += (this.lastName.length > 0) ? this.lastName : this.#signUnknown;\r\n        return displayName;\r\n    }\r\n\r\n    getDisplayDate(date, useFull, unsureOfYear)\r\n    {\r\n        let str = (useFull) ? date.getDate().toString().padStart(2, \"0\") + \".\" : \"\";\r\n        str += (useFull) ? (date.getMonth() + 1).toString().padStart(2, \"0\") + \".\" : \"\";\r\n        let year = date.getFullYear().toString();\r\n        if (unsureOfYear)\r\n        {\r\n            year = year.slice(0, -1) + this.#signUnsure;\r\n        }\r\n        return str.toString() + year.toString();\r\n    }\r\n\r\n    getDisplayDateBirth()\r\n    {\r\n        if (this.unknownDateOfBirth) {return this.#signUnknown;}\r\n        return this.getDisplayDate(this.dateBirth, this.useFullDateBirth, this.unsurePreciseYearOfBirth);\r\n    }\r\n\r\n    getDisplayDateDeath()\r\n    {\r\n        if (this.unknownDateOfDeath) { return this.#signUnknown; }\r\n        return this.getDisplayDate(this.dateDeath, this.useFullDateDeath, this.unsurePreciseYearOfDeath);\r\n    }\r\n\r\n    getValidPotentialParents(family, includeParent0 = false, includeParent1 = false)\r\n    {\r\n        //a person is valid as a parent when they are born earlier than this person, or when any of the 2 dates is unknown\r\n        //and when they are not already a parent of this person, unless specified to include that parent in the result\r\n        //and when they are not a child of this person\r\n\r\n        //when exact years are unsure, then the most permissive scenario has to be considered, where the parent is the oldest possible\r\n        //and the child is the youngest possible\r\n        //we only compare just the years when one of the dates is marked as not full, then it is permitted for the 2 people to have the same year\r\n        //even though those timeframes are unrealistic, someone might want to use this tool to make a family tree not for humans, but hamsters\r\n\r\n        const potentialParents = [];\r\n        const dateBirthThis = (this.unsurePreciseYearOfBirth) ? Helpers.floorDateYearTo(this.dateBirth, 10) : this.dateBirth;\r\n        for(let i = 0; i < family.length; i++)\r\n        {\r\n            if (this.id == family[i].id || family[i].parentId0 == this.id || family[i].parentId1 == this.id) {continue;}\r\n            if (family[i].id == this.parentId0 && !includeParent0){continue;}\r\n            if (family[i].id == this.parentId1 && !includeParent1){continue;}\r\n\r\n            const dateBirthParent = (family[i].unsurePreciseYearOfBirth) ? Helpers.ceilDateYearTo(family[i].dateBirth, 10) : family[i].dateBirth;\r\n            const fullDatesInBoth = this.useFullDateBirth && family[i].useFullDateBirth;\r\n            const someDateUnknown = this.unknownDateOfBirth || family[i].unknownDateOfBirth;\r\n            if ((fullDatesInBoth && dateBirthThis > dateBirthParent) || dateBirthThis.getFullYear() >= dateBirthParent.getFullYear() || someDateUnknown)\r\n            {\r\n                potentialParents.push(family[i]);\r\n            }\r\n        }\r\n        return potentialParents;\r\n    }\r\n\r\n    getCurrentParents(family)\r\n    {\r\n        const i0 = family.findIndex(item => item.id == this.parentId0);\r\n        const i1 = family.findIndex(item => item.id == this.parentId1);\r\n        const returnArray = [null, null];\r\n        if (i0 >= 0) {returnArray[0] = family[i0];}\r\n        if (i1 >= 0) {returnArray[1] = family[i1];}\r\n        return returnArray;\r\n    }\r\n\r\n    /**\r\n     * Adds parent id to a slot that is not full, if none found replaces parentId0.\r\n     */\r\n    addParentId(newId)\r\n    {\r\n        if (!this.parentId0) {this.parentId0 = newId;}\r\n        else if (!this.parentId1) {this.parentId1 = newId;}\r\n        else {this.parentId0 = newId;}\r\n    }\r\n\r\n    getLocation()\r\n    {\r\n        return {x: this.locationInTreeX, y: this.locationInTreeY};\r\n    }\r\n\r\n    static cloneFromOther(otherPerson)\r\n    {\r\n        const clone = new Person(otherPerson.id);\r\n        for(let property in otherPerson)\r\n        {\r\n            if (clone.hasOwnProperty(property) && otherPerson.hasOwnProperty(property))\r\n            {\r\n                clone[property] = otherPerson[property];\r\n            }\r\n        }\r\n        clone.healthProblems = [...otherPerson.healthProblems];\r\n        return clone;\r\n    }\r\n}\r\n\r\nexport default Person;","D:\\ReactProjects\\lite-lineage\\src\\components\\SideDrawerEditMemberForm.jsx",["135","136","137","138"],"import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport Person from '../Person';\r\nimport SelectParent from './SelectParent';\r\nimport SpecialDateInput from './SpecialDateInput';\r\n\r\nclass EditMemberForm extends Component\r\n{\r\n    #noneSign = \"-\";\r\n\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        //this.state = {}\r\n        this.changeName = this.changeName.bind(this);\r\n        this.changeStr = this.changeStr.bind(this);\r\n        this.changeBool = this.changeBool.bind(this);\r\n        this.changeNotes = this.changeNotes.bind(this);\r\n        this.changeDate = this.changeDate.bind(this);\r\n        this.changeNumberOfHealthProblems = this.changeNumberOfHealthProblems.bind(this);\r\n        this.changeHealthProblem = this.changeHealthProblem.bind(this);\r\n        this.changeParents = this.changeParents.bind(this);\r\n    }\r\n\r\n    //there's a bunch of similar methods, might need different processing for different types later\r\n    changeName(e, propertyName)\r\n    {\r\n        const draftPerson = Person.cloneFromOther(this.props.editedPerson);\r\n        const possibleVariants = [\"firstName\", \"lastName\", \"secondName\"];\r\n        if (possibleVariants.includes(propertyName) && draftPerson.hasOwnProperty(propertyName))\r\n        {\r\n            draftPerson[propertyName] = e.target.value;\r\n            this.props.handleEdit(this.props.editedPerson.id, draftPerson);\r\n        }\r\n        else\r\n        {\r\n            console.error(\"propertyName:\" + propertyName + \" not recognized as a possible variant, or is not an own property of a Person obj\");\r\n        }\r\n    }\r\n\r\n    changeNotes(e)\r\n    {\r\n        const draftPerson = Person.cloneFromOther(this.props.editedPerson);\r\n        draftPerson.notes = e.target.value;\r\n        this.props.handleEdit(this.props.editedPerson.id, draftPerson);\r\n    }\r\n\r\n    changeStr(e, propertyName)\r\n    {\r\n        const draftPerson = Person.cloneFromOther(this.props.editedPerson);\r\n        if (draftPerson.hasOwnProperty(propertyName))\r\n        {\r\n            draftPerson[propertyName] = e.target.value.toString();\r\n            this.props.handleEdit(this.props.editedPerson.id, draftPerson);\r\n        }\r\n        else\r\n        {\r\n            console.error(\"propertyName:\" + propertyName + \" is not an own property of a Person obj\");\r\n        }\r\n    }\r\n\r\n    changeBool(e, propertyName)\r\n    {\r\n        const draftPerson = Person.cloneFromOther(this.props.editedPerson);\r\n        if (draftPerson.hasOwnProperty(propertyName))\r\n        {\r\n            draftPerson[propertyName] = e.target.checked;\r\n            this.props.handleEdit(this.props.editedPerson.id, draftPerson);\r\n        }\r\n        else\r\n        {\r\n            console.error(\"propertyName:\" + propertyName + \" is not an own property of a Person obj\");\r\n        }\r\n    }\r\n\r\n    changeDate(dateObj, propertyName)\r\n    {\r\n        const draftPerson = Person.cloneFromOther(this.props.editedPerson);\r\n        const possibleVariants = [\"dateBirth\", \"dateDeath\"];\r\n        if (possibleVariants.includes(propertyName) && draftPerson.hasOwnProperty(propertyName))\r\n        {\r\n            draftPerson[propertyName] = dateObj;\r\n            this.props.handleEdit(this.props.editedPerson.id, draftPerson);\r\n        }\r\n        else\r\n        {\r\n            console.error(\"propertyName:\" + propertyName + \" not recognized as a possible variant, or is not an own property of a Person obj\");\r\n        }\r\n    }\r\n\r\n    changeParents(e, parentIndex)\r\n    {\r\n        const newParentId = e.target.value;\r\n        if (parentIndex == 0 || parentIndex == 1)\r\n        {\r\n            const draftPerson = Person.cloneFromOther(this.props.editedPerson);\r\n            draftPerson[\"parentId\" + parentIndex] = (newParentId === this.#noneSign) ? null : newParentId;\r\n            this.props.handleEdit(this.props.editedPerson.id, draftPerson);\r\n        }\r\n        else\r\n        {\r\n            console.error(\"invalid parentIndex, should be 0 or 1: \" + parentIndex);\r\n        }\r\n    }\r\n\r\n    changeHealthProblem(e)\r\n    {\r\n        const index = e.target.name.replace(\"health_problem_\", \"\");\r\n        console.log(e);\r\n        if (this.props.editedPerson.healthProblems.length > index && index >= 0)\r\n        {\r\n            const draftPerson = Person.cloneFromOther(this.props.editedPerson);\r\n            draftPerson.healthProblems[index] = e.target.value;\r\n            this.props.handleEdit(this.props.editedPerson.id, draftPerson);\r\n        }\r\n    }\r\n\r\n    changeNumberOfHealthProblems(n)\r\n    {\r\n        if (n == 0){return;}\r\n        if (n == -1 && this.props.editedPerson.healthProblems.length < 1){return;}\r\n\r\n        const draftPerson = Person.cloneFromOther(this.props.editedPerson);\r\n        if (n > 0)\r\n        {\r\n            draftPerson.healthProblems.push(\"\");\r\n        }\r\n        else\r\n        {\r\n            draftPerson.healthProblems.splice(-1, 1);\r\n        }\r\n        this.props.handleEdit(this.props.editedPerson.id, draftPerson);\r\n    }\r\n\r\n    render()\r\n    {\r\n        const healthProblemInputs = this.props.editedPerson.healthProblems.map((problem, index) => (\r\n            <div className=\"side_drawer_row\">\r\n                <input value={problem} onChange={this.changeHealthProblem.bind(this)} type=\"text\" key={index} name={\"health_problem_\" + index} className=\"word_input side_drawer_input\"/>\r\n            </div>\r\n        ));\r\n\r\n        const potentialParents0 = this.props.editedPerson.getValidPotentialParents(this.props.family, true, false);\r\n        const potentialParents1 = this.props.editedPerson.getValidPotentialParents(this.props.family, false, true);\r\n        const currentParents = this.props.editedPerson.getCurrentParents(this.props.family);\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"side_drawer_content_section\">\r\n                    <div className=\"side_drawer_row\">\r\n                        <label htmlFor=\"name_first\" className=\"word_input_label\">First name:</label>\r\n                        <input value={this.props.editedPerson.firstName} onChange={(e) => this.changeName(e, \"firstName\")} type=\"text\" name=\"name_first\" className=\"word_input side_drawer_input\"/>\r\n                    </div>\r\n\r\n                    <div className=\"side_drawer_row\">\r\n                        <label htmlFor=\"name_second\" className=\"word_input_label\">Second name:</label>\r\n                        <input value={this.props.editedPerson.secondName} onChange={(e) => this.changeName(e, \"secondName\")} type=\"text\" name=\"name_second\" className=\"word_input side_drawer_input\"/>\r\n                    </div>\r\n\r\n                    <div className=\"side_drawer_row\">\r\n                        <label htmlFor=\"name_last\" className=\"word_input_label\">Last name:</label>\r\n                        <input value={this.props.editedPerson.lastName} onChange={(e) => this.changeName(e, \"lastName\")} type=\"text\" name=\"name_last\" className=\"word_input side_drawer_input\"/>\r\n                    </div>\r\n\r\n                    <div className=\"side_drawer_row\">\r\n                        <label htmlFor=\"is_dead\" className=\"checkbox_input_label\">Deceased:</label>\r\n                        <input checked={this.props.editedPerson.isDead} onChange={(e) => this.changeBool(e, \"isDead\")} type=\"checkbox\" name=\"is_dead\" className=\"checkbox_input side_drawer_input\"/>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"side_drawer_content_section\">\r\n                    <div className=\"side_drawer_row\">Parents:\r\n                        <SelectParent handleChange={this.changeParents} currentParent={currentParents[0]} potentialParents={potentialParents0} parentSlotIndex={0} noneSign={this.#noneSign}/>\r\n                        <SelectParent handleChange={this.changeParents} currentParent={currentParents[1]} potentialParents={potentialParents1} parentSlotIndex={1} noneSign={this.#noneSign}/>\r\n                    </div>\r\n                </div>\r\n\r\n                <SpecialDateInput\r\n                    date={this.props.editedPerson.dateBirth}\r\n                    useFull={this.props.editedPerson.useFullDateBirth}\r\n                    impreciseYear={this.props.editedPerson.unsurePreciseYearOfBirth}\r\n                    unknownDate={this.props.editedPerson.unknownDateOfBirth}\r\n                    dateOfStr={\"birth\"}\r\n                    displayedDate={this.props.editedPerson.getDisplayDateBirth()}\r\n                    handleChangeDate={this.changeDate}\r\n                    handleChangeBool={this.changeBool}\r\n                    propertySuffix={\"Birth\"}\r\n                    disabled={false}\r\n                />\r\n\r\n                <SpecialDateInput\r\n                    date={this.props.editedPerson.dateDeath}\r\n                    useFull={this.props.editedPerson.useFullDateDeath}\r\n                    unsurePreciseYear={this.props.editedPerson.unsurePreciseYearOfDeath}\r\n                    unknownDate={this.props.editedPerson.unknownDateOfDeath}\r\n                    dateOfStr={\"death\"}\r\n                    displayedDate={this.props.editedPerson.getDisplayDateDeath()}\r\n                    handleChangeDate={this.changeDate}\r\n                    handleChangeBool={this.changeBool}\r\n                    propertySuffix={\"Death\"}\r\n                    disabled={!this.props.editedPerson.isDead}\r\n                />\r\n\r\n                <div className=\"side_drawer_content_section\">\r\n                    <div className=\"side_drawer_row\">\r\n                    <label htmlFor=\"cause_of_death\" className=\"word_input_label\">Cause of death:</label>\r\n                    <input disabled={!this.props.editedPerson.isDead} value={this.props.editedPerson.causeOfDeath} onChange={(e) => this.changeStr(e, \"causeOfDeath\")} type=\"text\" name=\"cause_of_death\" className=\"word_input side_drawer_input\"/>\r\n                    </div>\r\n\r\n                    <div className=\"side_drawer_row\">\r\n                    <label htmlFor=\"place_birth\" className=\"word_input_label\">Place of birth:</label>\r\n                    <input value={this.props.editedPerson.placeBirth} onChange={(e) => this.changeStr(e, \"placeBirth\")} type=\"text\" name=\"place_birth\" className=\"word_input side_drawer_input\"/>\r\n                    </div>\r\n\r\n                    <div className=\"side_drawer_row\">\r\n                    <label htmlFor=\"place_death\" className=\"word_input_label\">Place of death:</label>\r\n                    <input disabled={!this.props.editedPerson.isDead} value={this.props.editedPerson.placeDeath} onChange={(e) => this.changeStr(e, \"placeDeath\")} type=\"text\" name=\"place_death\" className=\"word_input side_drawer_input\"/>\r\n                    </div>\r\n                </div>\r\n                \r\n                <div className=\"side_drawer_content_section\">\r\n                    <div className=\"side_drawer_row\">\r\n                    <label htmlFor=\"color_eye\" className=\"word_input_label\">Eye color:</label>\r\n                    <input value={this.props.editedPerson.colorEyes} onChange={(e) => this.changeStr(e, \"colorEyes\")} type=\"text\" name=\"color_eye\" className=\"word_input side_drawer_input\"/>\r\n                    </div>\r\n\r\n                    <div className=\"side_drawer_row\">\r\n                    <label htmlFor=\"color_hair\" className=\"word_input_label\">Hair color:</label>\r\n                    <input value={this.props.editedPerson.colorHair} onChange={(e) => this.changeStr(e, \"colorHair\")} type=\"text\" name=\"color_hair\" className=\"word_input side_drawer_input\"/>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"side_drawer_content_section\">\r\n                    <div className=\"side_drawer_input_list\">\r\n                        <p className=\"side_drawer_row\">Diseases and health problems:</p>\r\n                        {healthProblemInputs}\r\n                        <div className=\"side_drawer_row\">\r\n                            <button type=\"button\" onClick={this.changeNumberOfHealthProblems.bind(this, 1)}>+</button>\r\n                            <button type=\"button\" onClick={this.changeNumberOfHealthProblems.bind(this, -1)}>-</button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <label htmlFor=\"notes\" className=\"side_drawer_row\">Notes:</label>\r\n                    <textarea value={this.props.editedPerson.notes} onChange={this.changeNotes} name=\"notes\" className=\"multiline_input side_drawer_input\"/> \r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EditMemberForm;","D:\\ReactProjects\\lite-lineage\\src\\components\\StartTreeButton.jsx",["139"],"import React, { Component } from 'react';\r\nimport IconDelete from '../icons/icon_delete.svg';\r\nimport TreeContext from '../TreeContext';\r\n\r\nclass StartTreeButton extends Component\r\n{\r\n    static contextType = TreeContext;\r\n\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {tryingToDelete: false}\r\n        this.handleCancelingDelete = this.handleCancelingDelete.bind(this);\r\n        this.handleTryingToDelete = this.handleTryingToDelete.bind(this);\r\n    }\r\n\r\n    handleTryingToDelete()\r\n    {\r\n        this.setState({tryingToDelete: true});\r\n    }\r\n\r\n    handleCancelingDelete()\r\n    {\r\n        this.setState({tryingToDelete: false});\r\n    }\r\n    \r\n    render()\r\n    {\r\n        const confirmation = (\r\n            <div className=\"start_button_delete_confirmation\">\r\n                <p>{\"Do you really want to delete \" + this.props.treeName + \"?\"}</p>\r\n                <div>\r\n                    <button className=\"confirmation_button_warning\" onClick={this.context.treeHandlers.handleDeleteTree.bind(this, this.props.treeName)}>YES</button>\r\n                    <button className=\"confirmation_button_neutral\" onClick={this.handleCancelingDelete}>NO</button>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        return (\r\n            <div className=\"start_button_wrapper\">\r\n                <button onClick={this.context.treeHandlers.handleOpenTree.bind(this, this.props.treeName)} className=\"start_button\">\r\n                    {this.props.treeName}\r\n                </button>\r\n                <button onClick={this.handleTryingToDelete} className=\"start_button_delete\">\r\n                    <img src={IconDelete}/>\r\n                </button>\r\n                {(this.state.tryingToDelete === true && confirmation)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StartTreeButton;","D:\\ReactProjects\\lite-lineage\\src\\TreeContext.js",["140"],"//import { createContext } from \"react\";\r\nimport React, {createContext} from 'react';\r\n\r\nconst TreeContext = React.createContext(\r\n    {\r\n        currentTree: null,\r\n        isInTree: false,\r\n        treeNames:[],\r\n\r\n        treeHandlers: {},\r\n        familyHandlers: {},\r\n    }\r\n);\r\n\r\nexport default TreeContext;","D:\\ReactProjects\\lite-lineage\\src\\components\\SpecialDateInput.jsx",["141"],"D:\\ReactProjects\\lite-lineage\\src\\Helpers.js",["142","143","144"],"const helpers = {\r\n    getDaysInMonthOfYear(monthIntZeroBased, yearInt)\r\n    {\r\n        //month 0-based as in js Date obj .getMonth(), eg january is 0\r\n        switch (monthIntZeroBased) {\r\n            case 1 :\r\n                return (yearInt % 4 == 0 && yearInt % 100 != 0) || yearInt % 400 == 0 ? 29 : 28;\r\n            case 8 : case 3 : case 5 : case 10 :\r\n                return 30;\r\n            default :\r\n                return 31\r\n        }\r\n    },\r\n\r\n    isDateValid(yearInt, monthIntZeroBased, dayInt)\r\n    {\r\n        //this doesnt change if the year falls outside of the +/-271821 limit of Date()\r\n        const maxDay = this.getDaysInMonthOfYear(monthIntZeroBased, yearInt)\r\n        return monthIntZeroBased >= 0 && monthIntZeroBased < 12 && dayInt > 0 && dayInt <= maxDay;\r\n    },\r\n\r\n    /**\r\n     * Force a value to be between min and max.\r\n     * @param {Number} n, @param {Number} min, @param {Number} max\r\n     */\r\n    clamp(n, min, max)\r\n    {\r\n        if (n < min){return min;}\r\n        if (n > max){return max;}\r\n        return n;\r\n    },\r\n\r\n    getRelativeCoords (event, referenceElement)\r\n    {\r\n        const position = {\r\n          x: event.pageX,\r\n          y: event.pageY\r\n        };\r\n      \r\n        const offset ={\r\n          left: referenceElement.offsetLeft - referenceElement.scrollLeft,\r\n          top: referenceElement.offsetTop - referenceElement.scrollTop\r\n        };\r\n      \r\n        let reference = referenceElement.offsetParent;\r\n      \r\n        while(reference)\r\n        {\r\n          offset.left += reference.offsetLeft;\r\n          offset.top += reference.offsetTop;\r\n          reference = reference.offsetParent;\r\n        }\r\n      \r\n        return { \r\n          x: position.x - offset.left,\r\n          y: position.y - offset.top,\r\n        }; \r\n    }\r\n\r\n    \r\n};\r\n\r\nexport default helpers;","D:\\ReactProjects\\lite-lineage\\src\\components\\FamilyConnection.jsx",[],"D:\\ReactProjects\\lite-lineage\\src\\components\\ConnectionRenderer.jsx",["145"],"import React, { Component } from 'react';\r\n\r\nclass ConnectionRenderer extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n    }\r\n    \r\n    render()\r\n    {\r\n        return (\r\n            <svg style={this.props.style}>{this.props.children}</svg>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConnectionRenderer;","D:\\ReactProjects\\lite-lineage\\src\\components\\SelectParent.jsx",[],"D:\\ReactProjects\\lite-lineage\\src\\geo\\V2.js",["146"],"/**Class for representing 2 dimensional vectors, useful both for points and for vectors representing translation/movement/direction.*/\r\nclass V2\r\n{\r\n    x = null;\r\n    y = null;\r\n\r\n    constructor(x, y)\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    /**Adds v2 to this vector, returning a new instance of V2. */\r\n    add(v2)\r\n    {\r\n        return new V2(this.x + v2.x, this.y + v2.y);\r\n    }\r\n\r\n    /**Returns a new V2 that is the sum of all passed vectors. */\r\n    static sum(...vectors)\r\n    {\r\n        const result = new V2(0, 0);\r\n        for(let i = 0; i < vectors.length; i++)\r\n        {\r\n            result.add(vectors[i]);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**Subtracts v2 from this vector, returning a new V2. */\r\n    sub(v2)\r\n    {\r\n        return new V2(this.x - v2.x, this.y - v2.y);\r\n    }\r\n\r\n    /**Returns a result of a - b. */\r\n    static diff(a, b)\r\n    {\r\n        return a.sub(b);\r\n    }\r\n\r\n    /**Multiplies this vector by a number and returns a new V2. */\r\n    mult(multiplier)\r\n    {\r\n        return new V2(this.x * multiplier, this.y * multiplier);\r\n    }\r\n\r\n    /**Divides this vector by a number and returns a new V2. */\r\n    divide(divider)\r\n    {\r\n        if (divider == 0) {return new V2(NaN, NaN);}\r\n        return new V2(this.x / divider, this.y / divider);\r\n    }\r\n\r\n    //shorthands\r\n    /**Shorthand for writing new V2(0, 0) */\r\n    static zero() {return new V2(0, 0);}\r\n    /**Shorthand for writing new V2(0, 0) */\r\n    static one() {return new V2(1, 1);}\r\n    /**A vector pointing up. Shorthand for writing new V2(1, 1) */\r\n    static u() {return new V2(0, 1);}\r\n    /**A vector pointing down. Shorthand for writing new V2(0, 1) */\r\n    static d() {return new V2(0, -1);}\r\n    /**A vector pointing left. Shorthand for writing new V2(-1, 0) */\r\n    static l() {return new V2(-1, 0);}\r\n    /**A vector pointing right. Shorthand for writing new V2(1, 0) */\r\n    static r() {return new V2(1, 0);}\r\n\r\n    //clockwise array of basic directions\r\n    static baseDirs() {return [V2.u(), V2.r(), V2.d(), V2.l()];}\r\n    static diagDirs() {return [new V2(1, 1), new V2(1, -1), new V2(-1, -1), new V2(-1, 1)];}\r\n    static eightDirs()\r\n    {\r\n        return[\r\n            V2.u(),\r\n            new V2(1, 1),\r\n            V2.r(),\r\n            new V2(1, -1),\r\n            V2.d(),\r\n            new V2(-1, -1),\r\n            V2.l(),\r\n            new V2(-1, 1),\r\n        ];\r\n    }\r\n\r\n    /**Returns a new V2 that is a clone of this one. */\r\n    clone()\r\n    {\r\n        return new V2(this.x, this.y);\r\n    }\r\n\r\n    /**Returns a new V2 that is a clone of other. */\r\n    static cloneFrom(other)\r\n    {\r\n        return new V2(other.x, other.y);\r\n    }\r\n\r\n    /**Returns the squared euclidian distance between points a and b. */\r\n    static sqDist(a, b)\r\n    {\r\n        return Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2);\r\n    }\r\n\r\n    /**Returns the euclidian distance between point a and b.*/\r\n    static dist(a, b)\r\n    {\r\n        return Math.sqrt(V2.sqDist(a, b));\r\n    }\r\n\r\n    /**Returns the Manhattan distance between points a and b. */\r\n    static mhDist(a, b)\r\n    {\r\n        const v = b.sub(a);\r\n        return Math.abs(v.x) + Math.abs(v.y);\r\n    }\r\n\r\n    /**Returns the magnitude (also called length) of this vector.*/\r\n    magnitude()\r\n    {\r\n        return Math.sqrt(this.x * this.x + this.y * this.y);\r\n    }\r\n\r\n    /**Normalizes this vector, which means it makes it have magnitude = 1, preserving the direction. Returns V2.zero() when current magnitude is 0.*/\r\n    normalize()\r\n    {\r\n        const mag = this.magnitude();\r\n        if (mag === 0){console.log(\"Tried normalizing vector with 0 magnitude.\"); return V2.zero;}\r\n        return new V2(this.x / mag, this.y / mag);\r\n    }\r\n\r\n    /**Returns the dot product of a and b.*/\r\n    static dot(a, b)\r\n    {\r\n        return a.x * b.x + a.y * b.y;\r\n    }\r\n\r\n    /**Returns the dot product of a and b after normalizing both of them.*/\r\n    static normDot(a, b)\r\n    {\r\n        const nA = a.normalize();\r\n        const nB = b.normalize();\r\n        return V2.dot(nA, nB);\r\n    }\r\n  \r\n    /**Returns the signed angle of this vector in degrees in relation to the x axis. This means V2.right() will return 0 degrees.\r\n     * V2.up() will return -90, V2.down() 90, etc. The range of return values is between -180 and 180.\r\n     */\r\n    angleRaw()\r\n    {\r\n        return Math.atan2(this.y, this.x) * 180 / Math.PI;\r\n    }\r\n\r\n    /**Returns the unsigned angle of this vector in degrees, from 0 to 360, starting at V2.up() and going clockwise. */\r\n    angle()\r\n    {\r\n        const angle = this.angleRaw();\r\n        return (angle >= -90 && angle <= 180) ? angle + 90 : angle + 450;\r\n    }\r\n\r\n    /**Returns the unsigned angle between 2 vectors a and b. The range of return values is between 0 and 180 */\r\n    static angleBetween(a, b)\r\n    {\r\n        return Math.abs(Math.atan2(a.y, a.x) - Math.atan2(b.y, b.x) * 180 / Math.PI);\r\n    }\r\n\r\n    /**Returns a new V2 with x and y being rounded from this vector. */\r\n    round()\r\n    {\r\n        return new V2(Math.round(this.x), Math.round(this.y));\r\n    }\r\n\r\n    /**Returns a new V2 with x and y being rounded up from this vector. */\r\n    ceil()\r\n    {\r\n        return new V2(Math.ceil(this.x), Math.ceil(this.y));\r\n    }\r\n\r\n    /**Returns a new V2 with x and y being rounded down from this vector. */\r\n    floor()\r\n    {\r\n        return new V2(Math.floor(this.x), Math.floor(this.y));\r\n    }\r\n\r\n    /**Returns a new V2 of which y is the x of this one, and of which x is the y of this one */\r\n    swapDimensions()\r\n    {\r\n        return new V2(this.y, this.x);\r\n    }\r\n\r\n    /**Scales this vector to a set magnitude, returning a new instance of V2. Might be prone to floating point innacuracies. */\r\n    setMagnitude(target)\r\n    {\r\n        if (target < 0) {console.error(\"Trying to set magnitude to a negative value, this is not possible.\"); return V2.zero();}\r\n        const normalized = this.normalize();\r\n        return normalized.mult(target);\r\n    }\r\n\r\n    /**If the magnitude of this vector exceeds min and max, forces it to be within range. Returns a new V2. */\r\n    clampMagnitude(min, max)\r\n    {\r\n        if (min < 0){min = 0;}\r\n        const mag = this.magnitude();\r\n        if (mag < min) {return this.setMagnitude(min);}\r\n        if (mag > max) {return this.setMagnitude(max);}\r\n        return this;\r\n    }\r\n\r\n    /**Returns a new V2 that is the result of multiplying this vector and another component-wise. */\r\n    scale(v2)\r\n    {\r\n        return new V2(this.x * v2.x, this.y * v2.y);\r\n    }\r\n\r\n    /**Returns a new V2 that is made up of the smallest x and the smallest y found within passed vectors. Returns null if none passed.*/\r\n    static min(...vectors)\r\n    {\r\n        if (!vectors || vectors.length <= 0){return null;}\r\n        let minX, minY = Number.POSITIVE_INFINITY;\r\n        for(let i = 0; i < vectors.length; i++)\r\n        {\r\n            if (vectors[i].x < minX) {minX = vectors[i].x;}\r\n            if (vectors[i].y < minY) {minY = vectors[i].y;}\r\n        }\r\n        return new V2(minX, minY);\r\n    }\r\n\r\n    /**Returns a new V2 that is made up of the biggest x and the biggest y found within passed vectors. Returns null if none passed.*/\r\n    static max(...vectors)\r\n    {\r\n        if (!vectors || vectors.length <= 0){return null;}\r\n        let maxX, maxY = Number.NEGATIVE_INFINITY;\r\n        for(let i = 0; i < vectors.length; i++)\r\n        {\r\n            if (vectors[i].x > maxX) {maxX = vectors[i].x;}\r\n            if (vectors[i].y > maxY) {maxY = vectors[i].y;}\r\n        }\r\n        return new V2(maxX, maxY);\r\n    }\r\n\r\n    /**Returns a new V2 representing the ranges between minimal and maximal values of x and of y occuring within passed vectors. Returns null if none passed.*/\r\n    static rangeDimensionally(...vectors)\r\n    {\r\n        if (!vectors || vectors.length <= 0){return null;}\r\n        const min = V2.min(...vectors);\r\n        const max = V2.max(...vectors);\r\n        return new V2(max.x - min.x, max.y - min.y);\r\n    }\r\n\r\n    /**Returns a point that is a frac fraction of the way between points a and b, eg. if the fraction is 0.5, returns the halfway point.*/\r\n    static getPointBetween(a, b, frac = 0.5)\r\n    {\r\n        const dir = b.sub(a);\r\n        return a.add(dir.mult(frac));\r\n    }\r\n\r\n    /**Returns an array of n points spaced equally between points a and b. Eg. if n = 3, points are 1/4 of the way, 1/2 of the way and 3/4 of the way.\r\n     * If includeEnds is true, the array also includes point a at [0], and point b at [last], in that case the length of the return array is n + 2.\r\n     */\r\n    static getPointsBetween(a, b, n, includeEnds)\r\n    {\r\n        const returnArray = [];\r\n        if (includeEnds) {returnArray.push(V2.cloneFrom(a));}\r\n        const fracBase = 1 / (1 + Math.abs(n));\r\n        let frac;\r\n        for(let i = 0; i < n; i++)\r\n        {\r\n            frac = fracBase * (i + 1);\r\n            returnArray.push(V2.getPointBetween(a, b, frac));\r\n        }\r\n        if (includeEnds) {returnArray.push(V2.cloneFrom(b));}\r\n        return returnArray;\r\n    }\r\n\r\n    /**Returns true if this vector is perpendicular to other (angled at 90 degrees). Tolerance is used to determine how precisely the 2 vectors need to be perpendicular for it to be considered true.\r\n     * A value of 0 means only exactly perpendicular vectors will be considered as such. Values in the range of 0.001 to 0.00001 are recommended.*/\r\n    isPerpendicular(other, tolerance = 0.0001)\r\n    {\r\n        return (Math.abs(V2.normDot(this, other)) <= tolerance);\r\n    }\r\n\r\n    /**Returns true if this vector is paralell to other. Tolerance is used to determine how precisely the 2 vectors need to be paralell for it to be considered true.\r\n     * A value of 0 means only exactly paralell vectors will be considered as such. Values in the range of 0.001 to 0.00001 are recommended.\r\n    */\r\n    isParallel(other, tolerance = 0.0001)\r\n    {\r\n        return (Math.abs(V2.normDot(this, other) - 1) <= tolerance) || (Math.abs(V2.normDot(this, other) + 1) <= tolerance);\r\n    }\r\n\r\n    /**Returns true if all the vectors passed in are parallel. Tolerance is used to determine how precisely the 2 vectors need to be paralell for it to be considered true.\r\n     * A value of 0 means only exactly paralell vectors will be considered as such. Values in the range of 0.001 to 0.00001 are recommended. If there's no vectors for comparison returns true.\r\n     */\r\n    static areParallel(tolerance = 0.0001, ...vectors)\r\n    {\r\n        if (!vectors || vectors.length < 2){return true;}\r\n        for(let i = 1; i < vectors.length; i++)\r\n        {\r\n            if (!vectors[i - 1].isParallel(vectors[i]))\r\n            {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**Returns a new V2 perpendicular to this one. Y axis is always positive and the magnitude is preserved.*/ \r\n    getPerpendicular()\r\n    {\r\n        return (this.x >= 0) ? new V2(-this.y, this.x) : new V2(this.y, -this.x);\r\n    }\r\n\r\n    /**Returns a string representation of this vector that looks like this: [x; y] */\r\n    toString()\r\n    {\r\n        return \"[\" + this.x.toString() + \"; \" + this.y.toString() + \"]\";\r\n    }\r\n}\r\n\r\nexport default V2",{"ruleId":"147","replacedBy":"148"},{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","severity":1,"message":"152","line":224,"column":87,"nodeType":"153","messageId":"154","endLine":224,"endColumn":89},{"ruleId":"151","severity":1,"message":"152","line":277,"column":51,"nodeType":"153","messageId":"154","endLine":277,"endColumn":53},{"ruleId":"151","severity":1,"message":"155","line":302,"column":26,"nodeType":"153","messageId":"154","endLine":302,"endColumn":28},{"ruleId":"151","severity":1,"message":"152","line":307,"column":57,"nodeType":"153","messageId":"154","endLine":307,"endColumn":59},{"ruleId":"151","severity":1,"message":"152","line":326,"column":51,"nodeType":"153","messageId":"154","endLine":326,"endColumn":53},{"ruleId":"156","severity":1,"message":"157","line":11,"column":5,"nodeType":"158","messageId":"159","endLine":15,"endColumn":6},{"ruleId":"151","severity":1,"message":"152","line":55,"column":96,"nodeType":"153","messageId":"154","endLine":55,"endColumn":98},{"ruleId":"151","severity":1,"message":"152","line":90,"column":81,"nodeType":"153","messageId":"154","endLine":90,"endColumn":83},{"ruleId":"151","severity":1,"message":"152","line":126,"column":17,"nodeType":"153","messageId":"154","endLine":126,"endColumn":19},{"ruleId":"151","severity":1,"message":"152","line":197,"column":93,"nodeType":"153","messageId":"154","endLine":197,"endColumn":95},{"ruleId":"151","severity":1,"message":"152","line":218,"column":92,"nodeType":"153","messageId":"154","endLine":218,"endColumn":94},{"ruleId":"151","severity":1,"message":"152","line":219,"column":93,"nodeType":"153","messageId":"154","endLine":219,"endColumn":95},{"ruleId":"156","severity":1,"message":"157","line":6,"column":5,"nodeType":"158","messageId":"159","endLine":10,"endColumn":6},{"ruleId":"156","severity":1,"message":"157","line":6,"column":5,"nodeType":"158","messageId":"159","endLine":10,"endColumn":6},{"ruleId":"151","severity":1,"message":"152","line":109,"column":27,"nodeType":"153","messageId":"154","endLine":109,"endColumn":29},{"ruleId":"151","severity":1,"message":"152","line":138,"column":57,"nodeType":"153","messageId":"154","endLine":138,"endColumn":59},{"ruleId":"151","severity":1,"message":"152","line":168,"column":57,"nodeType":"153","messageId":"154","endLine":168,"endColumn":59},{"ruleId":"151","severity":1,"message":"152","line":56,"column":30,"nodeType":"153","messageId":"154","endLine":56,"endColumn":32},{"ruleId":"151","severity":1,"message":"152","line":60,"column":35,"nodeType":"153","messageId":"154","endLine":60,"endColumn":37},{"ruleId":"151","severity":1,"message":"152","line":123,"column":25,"nodeType":"153","messageId":"154","endLine":123,"endColumn":27},{"ruleId":"151","severity":1,"message":"152","line":123,"column":64,"nodeType":"153","messageId":"154","endLine":123,"endColumn":66},{"ruleId":"151","severity":1,"message":"152","line":123,"column":98,"nodeType":"153","messageId":"154","endLine":123,"endColumn":100},{"ruleId":"151","severity":1,"message":"152","line":124,"column":30,"nodeType":"153","messageId":"154","endLine":124,"endColumn":32},{"ruleId":"151","severity":1,"message":"152","line":125,"column":30,"nodeType":"153","messageId":"154","endLine":125,"endColumn":32},{"ruleId":"151","severity":1,"message":"152","line":140,"column":53,"nodeType":"153","messageId":"154","endLine":140,"endColumn":55},{"ruleId":"151","severity":1,"message":"152","line":141,"column":53,"nodeType":"153","messageId":"154","endLine":141,"endColumn":55},{"ruleId":"151","severity":1,"message":"152","line":94,"column":25,"nodeType":"153","messageId":"154","endLine":94,"endColumn":27},{"ruleId":"151","severity":1,"message":"152","line":94,"column":45,"nodeType":"153","messageId":"154","endLine":94,"endColumn":47},{"ruleId":"151","severity":1,"message":"152","line":120,"column":15,"nodeType":"153","messageId":"154","endLine":120,"endColumn":17},{"ruleId":"151","severity":1,"message":"152","line":121,"column":15,"nodeType":"153","messageId":"154","endLine":121,"endColumn":17},{"ruleId":"160","severity":1,"message":"161","line":45,"column":21,"nodeType":"162","endLine":45,"endColumn":44},{"ruleId":"163","severity":1,"message":"164","line":2,"column":16,"nodeType":"165","messageId":"166","endLine":2,"endColumn":29},{"ruleId":"163","severity":1,"message":"167","line":1,"column":28,"nodeType":"165","messageId":"166","endLine":1,"endColumn":36},{"ruleId":"151","severity":1,"message":"152","line":7,"column":37,"nodeType":"153","messageId":"154","endLine":7,"endColumn":39},{"ruleId":"151","severity":1,"message":"155","line":7,"column":59,"nodeType":"153","messageId":"154","endLine":7,"endColumn":61},{"ruleId":"151","severity":1,"message":"152","line":7,"column":82,"nodeType":"153","messageId":"154","endLine":7,"endColumn":84},{"ruleId":"156","severity":1,"message":"157","line":5,"column":5,"nodeType":"158","messageId":"159","endLine":8,"endColumn":6},{"ruleId":"151","severity":1,"message":"152","line":51,"column":21,"nodeType":"153","messageId":"154","endLine":51,"endColumn":23},"no-native-reassign",["168"],"no-negated-in-lhs",["169"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'createContext' is defined but never used.","Identifier","unusedVar","'Fragment' is defined but never used.","no-global-assign","no-unsafe-negation"]